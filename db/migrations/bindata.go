// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x57\x4b\x53\xab\x48\x14\xde\xf3\x2b\xce\x2e\xb1\xc6\x54\x8d\x4e\xcd\x6c\x5c\x11\xc2\x28\x4a\x40\x81\x5c\xcb\xbb\xe9\x6a\xa1\x35\x68\xf3\xb8\x3c\x7c\xfc\xfb\xdb\x0d\x84\x67\x43\xd0\xcb\x82\x4a\xfa\x7c\xe7\x3b\x0f\xce\x77\x12\x56\x2b\xf8\x2b\xf0\x9f\x13\x9c\x11\xd8\xc5\x12\xfb\x6a\xdf\xe9\xe0\x87\x90\x12\x37\xf3\xa3\x10\x16\xbb\x78\x01\x7e\x0a\xe4\x83\xb8\x79\x46\x3c\x78\xdf\x93\x10\xb2\x3d\x3b\x2a\xfd\x38\x88\x7d\xc1\x71\x4c\x7d\xe2\x49\x8a\xa5\xca\x8e\x0a\x8e\xbc\xd6\x55\x70\x69\xfe\x28\x2d\x25\x60\x97\xef\xc1\x5a\xbb\xb4\x55\x4b\x93\x75\xb8\xb5\xb4\xad\x6c\x3d\xc0\x8d\xfa\x00\x86\xe9\x80\xb1\xd3\xf5\xd3\x02\x16\xe2\x80\xc0\x0f\xd9\x52\xae\x64\x0b\x96\xe7\xff\xfe\x77\xd2\x03\x50\x82\x3d\x92\x74\x21\xa5\x25\xf5\x33\x72\x26\x32\x44\xd4\x43\x43\xde\xd2\xe6\x46\x41\x40\xc2\xac\x6b\x92\x4e\x2e\xa4\x6e\x21\x1e\x0e\x5d\x16\x75\x76\x29\x15\xb7\x57\xc7\xec\x97\x32\xaf\xd8\x34\x4f\x8e\x62\x62\x9c\x25\x51\xf8\x19\xf8\xae\xb0\x29\xe4\x63\x32\x85\x18\xfb\x09\x72\x29\x4e\xd3\x31\x18\x47\xbd\x84\x2f\xd3\xa0\x92\x2b\x21\x6f\xa8\x97\x72\x3b\x95\x28\x4f\xdc\xbe\xa1\xb0\x28\xa6\x61\x3b\x96\xac\x19\x4e\xd5\x68\x84\x78\xef\x50\x1e\xfa\xbf\x72\x36\x97\x86\x76\xb7\x53\x61\xc9\xcf\x2a\x2e\x81\x07\xab\x14\xbd\x61\x9a\x93\x14\xb9\x7b\xe2\xbe\x82\x72\xa5\x2a\x37\xb0\xe4\x1d\x60\xf3\xbc\x5c\x04\x8b\x53\x58\x3c\x2d\x4e\xc6\x29\x9a\x66\x08\x99\x5a\xbd\x2a\x08\x65\x4e\xb8\xe6\x37\x85\xdf\x36\xfc\xa6\x4e\xf1\xd7\x6d\x14\xd2\x37\x4d\x2e\xd8\xd7\x97\x9c\xcf\xb2\xf9\x7d\xcb\x6f\xc5\x27\x65\xcf\x02\x8c\xcd\x27\xe2\x7a\xab\x86\xb4\x3a\x29\x67\x95\x27\x71\x78\x58\x60\xa9\xff\xab\x96\x6a\x28\xaa\x5d\x81\x2a\x25\x30\xdf\x23\xf0\x42\xce\x83\xd8\x4c\x42\x31\xc9\xfc\x62\x11\x94\xb1\xe7\xcb\x9d\x5d\xcc\x93\x8e\xca\xa4\xc2\x78\x7c\x3d\x39\xda\x56\xb5\x1d\x79\x7b\x0b\xf7\x9a\x73\x65\xee\x9c\xe2\x04\x7e\x9a\x86\x3a\xf4\xe0\xcb\xa0\x43\x3a\xcc\x3b\x8c\x02\x3f\xc4\xdf\x4d\xbb\x55\xf5\xb1\xae\x35\xc8\x6a\xde\xd9\x55\x0c\xc0\xa4\x9a\xd8\x15\x60\x4a\x98\x12\x72\xb6\x9f\xda\xe4\x75\x0e\x4f\xe4\x18\x22\xfb\x8c\x9b\x28\x67\x7f\x0b\x5a\xcb\x7a\xd0\x93\x36\x83\x35\x56\xfc\x31\x65\x65\xbe\xc3\xd5\xd0\xf7\x1f\x41\x1c\x20\x2d\x9d\x34\x4f\x04\x21\x9e\x79\x57\x1f\x45\x2d\x85\x34\x4c\x7d\x83\xae\x8d\x6b\xae\x07\x43\xbd\x3f\x7c\x54\x74\xd9\xb6\x35\xa5\x16\xe0\x38\x77\x5d\x73\x37\x40\xd3\x8a\x19\xf2\x9e\x60\x3f\xf4\xac\xc7\x5e\xb7\xf2\xcf\xd8\xdb\x3d\x1f\xe6\x3f\x7f\x89\xcc\x29\x63\x2c\x50\xe7\xa9\xce\xda\x56\x5d\xe9\x25\x24\xcd\x69\xd6\xc8\xee\x2b\xc2\xfb\xb6\xf4\x6a\xff\x2f\xaf\xc6\xe2\x6a\xf5\xa6\xf1\x6c\x39\x34\xf6\x53\x58\xad\x1c\x73\x63\xb2\xe9\x7f\x25\xec\x3c\x83\x30\xa7\xb4\x61\xaa\xaa\x3f\xa8\xe1\x9f\x73\x91\xf6\xd9\xcf\x29\xc5\xec\xe7\x52\x28\xeb\xca\x88\x9e\x92\x28\x18\x43\xf8\x29\x7f\x46\xb0\x36\x4d\x5d\x4c\x1f\xf9\x61\x96\x8e\x79\x0f\x04\x2b\xe4\xc0\x94\xa2\x22\x93\x74\x32\x95\x16\x2c\x8b\x7a\x20\x21\x4a\xb8\x94\x8e\x30\x0b\x57\x95\x30\x50\x6b\xe0\xcb\x47\x81\x44\x43\x3e\x4b\xab\x93\xa4\xa2\x82\xba\x31\x84\x25\xcf\x5b\x0f\x47\x23\x8a\xb7\x90\xb0\x61\x93\x11\xa5\x52\xbf\xed\x17\x85\x4d\xf4\x1e\x1e\x5e\x15\xea\xf7\x04\x7e\x38\xeb\x4d\x21\x89\x28\x65\xd6\x47\xec\xbe\x4a\x1b\xcb\xbc\xed\xec\x84\x8b\xf6\x51\xeb\x5f\x4d\xe7\xbc\x91\x5a\xe7\x78\x80\x2b\xfd\xbb\x98\x66\x23\x74\xce\x9f\xa3\x24\x46\x75\x9a\xe9\x85\xf4\x3b\x00\x00\xff\xff\xab\x1d\xc8\xfb\x19\x0d\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 3353, mode: os.FileMode(420), modTime: time.Unix(1471288032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5b\x6f\xdc\xc6\x15\xc7\x9f\xc5\x4f\xc1\x08\x48\xb1\x0b\xb8\x2b\xde\x2f\x06\xfc\x12\xdb\x05\xfc\x10\x07\x68\xfc\x56\x15\xc6\x90\x9c\xd9\x12\x5d\x2d\xe5\xe5\x2a\x95\x1c\xe4\xbb\xf7\xfc\xe6\x9c\x75\x94\x06\x6e\x5e\x22\x60\xb4\xe4\xcc\x99\x73\xfd\x9f\xff\xe1\xcd\x4d\xfa\x7a\x99\x7c\xba\xf7\x47\x7f\x72\x67\x3f\xa5\xc3\x53\xba\x5f\xfe\x3a\xcc\xc7\xc9\x9d\xdd\x2e\x11\x81\x75\x79\x38\x8d\x7e\x7d\xc9\xf3\x34\xdc\xdc\xcd\x7b\x91\x9c\x97\xe3\x7a\x93\x65\xf9\xc7\xf9\x38\x9f\x67\x77\xd8\xad\x9f\x0e\xbf\x17\xb8\xa8\xd9\x2f\x9c\xbd\xf9\x21\x7d\xff\xc3\x87\xf4\xed\x9b\x77\x1f\xbe\x49\x92\x7b\x37\xfe\xdb\xed\x7d\xfa\xab\x78\x92\xcc\x77\xf7\xcb\xe9\x9c\x6e\x92\xab\xeb\xe1\xe9\xec\xd7\x6b\x79\x18\x97\xbb\xfb\x93\x5f\xd7\x9b\xfd\xe7\xf9\x9e\x8d\x70\x77\xe6\x67\x5e\xf4\xff\xcd\xbc\x3c\x9c\xe7\x03\x2f\x4b\xbc\x70\xef\xce\xff\xba\x09\xf3\xc1\xf3\xc0\xc6\x7a\x3e\xcd\xc7\x7d\x3c\x3b\xcf\x77\xfe\x3a\xd9\x26\x49\x78\x38\x8e\xa9\xb9\xf7\x77\xef\xa6\x0d\x0f\xe9\x3f\xfe\x89\xd9\x17\xe9\xd1\xdd\xf9\x54\xaf\x6d\xd3\xcd\x65\xd7\x9f\x4e\xcb\x69\x9b\xfe\x9c\x5c\xed\x3f\xc7\xb7\xf4\xe5\xab\x14\xaf\x76\xef\xfd\x7f\x50\xe2\x4f\x9b\xe8\x36\xef\xdf\x3d\x84\x20\xef\xa8\xdd\x6e\x93\xab\x39\xc4\x0b\xdf\xbc\x4a\x8f\xf3\x01\x15\x57\x27\x7f\x7e\x38\x1d\x79\x7d\x91\x4a\x48\xbb\xb7\x68\x0f\x9b\x6b\x14\xa5\xdf\x7e\x7a\x99\x7e\xfb\xd3\xb5\x7a\x12\x6d\x89\x8e\x5f\x92\xe4\xea\x27\x77\x4a\x87\x87\x90\xaa\x1d\x35\x92\x5c\x7d\x54\x77\x5e\xa5\xf3\xb2\x7b\xbd\xdc\x3f\x6d\xfe\x22\x32\x2f\xc4\x37\xb9\x35\x1e\xde\x5e\x3c\xdd\xbd\x3e\x2c\xab\xdf\x48\xf8\x7f\x92\x3f\xa8\x51\xfd\x5f\x51\x24\x82\xea\xb7\x6d\x8a\x5b\xbb\xef\x70\x7d\xb3\x7d\x81\x44\x22\x67\xe7\xa7\x7b\x9f\xba\x75\xf5\x67\x52\xfe\x30\x9e\xd1\x12\xe3\xb3\x7a\x88\x99\x63\x58\xd2\x74\x59\x77\x7f\x93\xb2\xbe\x93\x97\x2f\xf7\xac\x84\x97\xfd\x67\x1a\x62\x0d\xe5\x4f\xcb\x98\x5c\xad\xf3\xe7\xf8\x3e\x1f\xcf\x4d\x95\x5c\xdd\x01\xfb\xf4\x8b\xd2\xef\xe5\x35\x6e\x7e\x10\x84\xa4\xc0\x64\xc7\x13\x76\x22\x54\x36\x61\xfe\x5f\x5b\xdb\xf4\xbd\x98\xd8\x6c\xcd\x02\x36\x2d\xca\x30\xef\xb0\x2e\x97\xbf\x7e\xf7\x47\x71\x47\xee\x46\x6f\x7e\x7b\x15\x47\xff\xef\x55\x7c\x95\xab\xcf\x3c\xff\xad\x02\x42\xfb\x23\x05\x04\x27\x3a\xbe\x04\xfa\x3b\x0d\x16\xfd\xd7\x95\xbc\x5b\xdf\xcc\x27\x51\x31\x2c\xcb\xe1\xf9\x6d\x77\x58\xff\x20\xf2\xa7\x55\x03\xf7\xa7\xe0\x46\xff\xf3\x2f\xcf\x6e\x1b\x24\x40\xf9\xc7\x69\xf8\xfe\x0b\x35\x3c\x63\x9a\x1f\x3f\x1d\x04\xe8\x8a\x8c\xcd\xf5\xed\x63\x1e\x6e\x1f\xbb\xe1\xf6\x31\xeb\x64\x65\xb6\xfa\xdb\xc7\xc6\xcb\xbe\xed\x05\x91\x71\xd5\xed\x63\xdd\xde\x3e\x56\x22\x5b\x97\xf2\x2e\xbf\x95\x9c\xe7\xb2\x3f\x89\x6c\x90\xbd\x42\xf6\x46\x79\x2e\x64\x0d\xb9\x3c\x37\x22\x2b\xe7\xdd\x24\xb2\xb2\x37\xca\x6f\x33\xca\x9e\xac\x9c\xf3\x42\x64\x45\x47\xe5\x64\x89\x9d\x2e\xd7\xb3\x51\xf4\x0c\xb2\x3c\x7e\xc8\x99\x93\xfd\xb2\x96\xe7\x4e\xed\x0c\xf2\x5b\x8a\x5c\x2b\x2b\xb0\x44\x76\x22\x06\xd1\xdf\x89\xbd\x06\x3f\x45\x6e\xca\x54\x57\x57\xa8\x8d\xe0\xf4\x8e\x97\xf3\x12\xf9\xa0\xfe\xb6\xf2\x9e\x8b\x4c\xdd\x68\x0c\xa1\xb3\x5f\xb9\xdf\x8b\x4c\x2e\xba\x7a\xf3\x79\x92\xb3\xb1\x56\x79\xec\xe2\xdf\x14\xd4\x57\x4f\x0c\xa2\xab\xcf\xf4\xbc\x6c\xd5\x5f\x27\x2b\x67\xaf\xd1\xb8\x5a\xf2\x2a\xba\x5a\xb1\x9d\xc9\x7d\x4f\x8e\x2c\xae\x56\xf4\x54\x8d\xc5\xd7\xa9\xee\xde\xee\x0f\xe8\x9c\xd4\xf7\x82\x78\x78\xee\xb4\x4e\xad\x3c\x8f\xe8\x94\x55\x8d\xfa\xee\x89\x5b\xf4\x75\xe4\x50\x7c\x1e\xe5\xb7\x33\x9b\xfc\x0e\x22\x37\x51\x23\x39\x6b\x45\x7f\x23\xb2\xc1\x6b\x4d\x0a\xb9\x5f\x90\x73\x72\x20\x71\xf8\xa0\xfa\x6b\xa7\x31\x0c\x95\xde\x03\x0f\xf8\xd7\xd6\xea\xff\x50\xeb\x99\xb3\x5a\xe3\xef\x98\x29\x06\xc8\x3f\x78\xea\x1a\xcd\x57\x97\x29\x4e\x26\xb9\x1f\x6a\xfd\xcd\x0a\xcd\x13\xbe\x73\xce\x5d\xea\x34\x89\x7c\x2d\x7b\x4e\xfc\x6b\x44\x7f\x86\xdd\x46\x6b\x09\x3e\x83\xd5\x71\x12\x99\x4c\xf4\xd4\x99\xd6\x1d\xfb\xbd\xfc\xb6\x72\xa7\xc8\x35\x0f\xc4\x85\xbd\x12\xbf\xc1\x20\xf9\x26\x57\x60\xb9\x52\xec\x44\xfc\x78\xd5\xe7\x1b\xad\x49\x95\x2b\x4e\xc1\xad\x93\xd8\x9a\x41\x75\x57\x86\x79\x7a\x84\xbe\xc1\x4e\x4e\x9e\x65\xd5\x93\xc6\x43\x7e\x5a\xf0\x25\x71\xe4\xe4\xa8\xd5\x7e\x1a\xc9\xed\xa8\x39\xc6\x07\x17\x14\x63\x25\x7e\x04\xad\x53\x53\xe8\x02\x83\xf8\x5e\xe7\x8a\xd1\xbc\xd7\x5f\x72\x32\x64\xaa\x1b\x2c\x35\xa5\xea\xea\xc0\x69\xa7\x38\xa5\xa7\x63\xac\xbd\xfa\x4b\xae\xcb\x5c\xcf\x2b\xb1\x3d\x58\xef\x14\x41\xcf\x5c\xa6\xb1\xd1\x07\xc4\xd3\xc0\x01\x9d\xfa\x89\x1e\x30\xd8\xd7\xd6\xbf\xdc\x11\xdf\x06\xaf\xbd\x1a\x7d\xc1\x2f\x89\xb7\xc9\x4d\xb6\xd1\x9c\xe5\x17\xfb\xd6\xcf\xd8\x04\xe7\xe0\x8b\x9a\x91\x37\x70\x32\x04\xb3\xd3\xa8\x4d\x30\x43\xfe\x62\xde\x4a\xd5\x3b\x8a\xae\x31\x68\x2f\x90\x7f\xf8\x23\x6b\x95\x9b\xe0\x25\x62\x42\xae\x77\xd6\x43\xec\x91\x87\x41\xf1\x85\xbf\x60\x04\x3b\x11\x17\x4e\x7b\x16\xff\xc9\x63\x3e\x29\xfe\x23\xe7\x18\x6f\x65\x95\xf2\x25\x3e\xd4\xc6\x43\xc5\x85\xdf\xac\xbe\xd8\x6b\x1a\xe5\xd4\xbe\xb7\x9e\x99\x54\x3f\x7b\x4d\xad\xf2\xf4\x0b\xd8\xc2\x26\xb5\xa2\xd7\x89\x17\x4e\x23\x77\xc8\x04\xfa\x43\xce\x9b\xc9\xb8\xd6\x78\xa5\x9a\x34\x66\xb0\xc2\x39\x39\x02\x1f\xe4\x03\x9e\x08\xbd\x71\xc2\xa0\xb5\x83\xb3\x8a\x56\x6d\x23\x43\x9f\x75\xa3\x72\x32\xfb\xe4\xa3\x75\x9a\x3b\x72\x4d\x0f\x97\x4e\xe3\x81\x4f\x7b\xbb\x0f\xbf\x50\x2f\x62\x27\x37\xae\xb7\xf9\x60\x35\x86\x0f\x63\xed\x9d\x62\x9f\x9a\xc4\xfa\xd0\x6f\x99\xc6\x58\x94\xca\xad\x55\xa1\xfc\x0b\xf7\x11\x07\xbc\xc5\x5e\x69\xb5\x25\x0f\xe0\x1e\xde\xed\x2b\xe5\x0a\xfa\x9d\x98\xfa\x49\xf5\x8f\xa3\xd6\x96\x3e\x81\xdf\xe8\x41\xfa\x13\x1f\x5b\xe3\x9f\x52\x74\x4d\x4e\xf9\x1d\x7e\xa2\xae\xad\xe1\x00\x1e\x09\xad\xd6\xac\x2d\x35\x3f\xde\x6b\x2e\xc9\x09\xf5\x86\xa7\x39\x27\x2f\xe4\x24\x54\xca\xf5\xf8\x41\x9f\xc0\x15\xec\xe3\x0b\x58\x27\xaf\xe4\xb7\x24\xef\x95\xc6\x4c\xbd\xe0\xcd\xda\xb8\x87\x58\xe8\x5b\xe6\xda\xd8\xd9\x1c\xf1\xc6\x73\xb2\x97\x8d\xca\x7d\xc4\x83\x6d\xf2\x93\x1b\x1f\x33\xcb\xfa\x4e\x67\x0c\xd8\x1d\x1a\x9d\x53\x93\xcd\x12\xb8\x06\xee\xa1\x2f\x23\x8e\xe1\x73\x9b\x57\xf8\xd6\x0f\x5a\x23\xea\xda\x06\xcd\x01\x18\x25\x1e\x30\xc0\xdc\x24\xa7\x60\x91\xda\xe0\x63\x6d\xb8\xa4\x36\xe4\x88\x45\xff\x8c\xa5\xf6\x32\x77\xc8\x23\xdf\x13\xf0\x64\x4e\x5f\x64\xda\x1b\xd4\xea\xc2\x67\x99\xf1\x70\xef\xb5\x06\xf5\xe5\x4e\xad\xb2\xf4\x41\x94\xb5\x19\x86\x7d\xf2\xc4\xfc\x80\x6f\x79\xce\x6c\xbe\xd3\x53\xe4\x98\x3a\xf3\x9d\x01\xc7\x93\x3f\xf2\x81\xcf\xf4\x74\x9c\x25\x99\xce\x49\xe6\x03\x98\xa1\xce\xb1\x87\x32\xe5\x3a\xe6\x63\xe4\xd2\x42\xfd\x22\xc7\xe8\xa5\xce\x70\x16\x1c\x5d\x7b\xe5\x1e\x64\x46\xe3\x68\xbe\x39\xc0\x17\xfe\xc7\x3e\x0e\x9a\xcf\xae\x57\x2c\xc4\xde\xe1\xbb\x68\x54\x6e\x03\xbb\xf4\x0b\x98\xbf\xe0\x11\x7f\x98\x85\xf4\x47\x51\xd9\x37\x52\xaf\x73\x19\x5c\x80\xc5\xf8\x5d\x65\xf5\x23\x36\xfc\x02\x2f\xf4\x1d\x7c\xcd\xcc\x18\x6d\x66\xc6\xfd\x5a\xf9\x03\xee\x88\x33\xb8\xd7\x9c\x86\xe6\x57\xde\x62\x3e\x53\xa3\x88\xf9\x52\x39\x03\x3f\xf0\x1f\x5f\x98\x49\x70\x5b\xac\x3f\x38\x6c\x95\x13\xe0\x53\x7a\x9b\x55\xda\x4c\xf0\xb9\xe2\x0f\x5d\x7d\xae\x76\xa6\x0b\x37\xf7\xca\x3d\xde\xbe\xbb\x6a\xfb\xe6\xf3\x83\x7d\x8f\x74\x9a\xf3\xde\xf6\xe3\x3c\x2a\xed\x1b\xcc\xfc\x61\xf6\xc2\xc9\xe0\xb1\xb2\xbe\x07\x1f\xe4\x1d\x9e\x8b\x1c\xdf\x28\x07\x80\xa9\xec\x82\xb3\x41\xf1\x4f\x1f\xc1\x1f\xae\xd0\x3e\x88\xdf\x2b\x95\xce\xc8\xde\x30\x42\x8d\x3a\xc3\x7f\xc4\x6d\xae\x7d\x06\x47\x73\x17\xdd\xe4\x21\xf6\x8a\xf1\x61\xf9\xdf\x00\x00\x00\xff\xff\xa6\xb8\xc7\x47\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1471302342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x4d\x73\x9b\x3c\x10\xbe\xf3\x2b\xf6\x66\x67\xde\x78\xe6\x4d\x67\xda\x4b\x4e\x18\xab\x09\x09\x86\x04\x70\x33\xe9\x45\xa3\x80\x52\x2b\x01\x41\xf9\xc8\xc7\xbf\xaf\x04\x98\x6f\x6c\xa6\xd5\x41\x63\x6b\x9f\x7d\x76\xf7\x41\xbb\xa3\xd5\x0a\xfe\x0b\xd9\xaf\x84\x64\x14\x76\xb1\x22\xfe\x3a\xf7\x06\x30\x0e\x29\xf5\x32\x16\x71\x58\xec\xe2\x05\xb0\x14\xe8\x07\xf5\xf2\x8c\xfa\xf0\xbe\xa7\x1c\xb2\xbd\x38\x2a\xfd\x24\x48\xfc\x21\x71\x1c\x30\xea\x2b\x9a\x8d\x54\x17\x81\xab\xae\x0d\x04\x5e\x90\x3f\x29\x4b\x05\xc4\x62\x3e\xac\xf5\x2b\x07\xd9\xba\x6a\xc0\x9d\xad\x6f\x55\xfb\x11\x6e\xd1\x23\x98\x96\x0b\xe6\xce\x30\xce\x0b\x18\x27\x21\x85\x1f\xaa\xad\x5d\xab\x36\x2c\xbf\x7c\xfd\x76\xd6\x03\x04\x94\xf8\x34\xe9\x42\x4a\x4b\xca\x32\x7a\x31\x66\x88\x02\x1f\x0f\x79\x4b\x9b\x17\x85\x21\xe5\x59\xd7\xa4\x9c\x5d\x2a\xdd\x42\x7c\xc2\x3d\x11\x75\x76\x29\x15\xb7\x5f\xc7\xec\x95\xb2\x5a\xb9\xd6\xc6\x82\x90\xbc\x52\xc8\x39\xfb\x9d\x53\x65\x5e\xf9\x69\x9e\x9c\xc4\xc4\x24\x4b\x22\xfe\x19\x32\x6f\x54\x26\xfa\x31\x91\x94\x52\x79\xb3\x04\x7b\x01\x49\xd3\x29\x98\x44\xbd\xf0\x97\xe3\xa0\x92\x2b\xa1\x6f\xb8\x97\x72\x3b\x95\x28\x4f\xbc\xbe\xa1\xb0\x68\x96\xe9\xb8\xb6\xaa\x9b\x6e\x25\x3d\xc6\x52\x4d\x5c\x6a\x05\x3b\x53\xbf\xdf\x21\x58\xca\xb3\x8a\x6b\xc4\x43\x54\x8a\xdf\x48\x90\xd3\x14\x7b\x7b\xea\xbd\x82\x76\x8d\xb4\x5b\x58\x4a\x05\xc4\x0d\x5f\x2e\xc2\xc5\x39\x2c\x9e\x17\x67\xd3\x14\x8d\x18\xa3\x4c\x2d\xad\x0a\x42\x55\x12\xae\xe5\xa6\xc9\x6d\x23\x37\x74\x8c\xbf\x96\x71\x94\xbe\x11\xb9\x60\x5f\x5f\x49\x3e\xdb\x91\xfb\x56\x6e\xc5\x2f\x6d\x2f\x02\x4c\xdd\x58\x2c\x3b\xb0\xba\xb6\xd5\x49\x79\x7b\x65\x12\x87\x8f\x05\x36\xfa\x8e\x6c\x64\x6a\xc8\xa9\x40\x55\x6f\x08\xdf\x13\xf0\xa2\xc1\x07\xb1\x45\x53\xc5\x34\x63\xc5\x68\x28\x63\xcf\x1f\x00\x62\x09\xcf\x60\xaa\x71\x0e\x18\x5f\x0e\x2c\x57\xdf\x22\xc7\x55\xb7\x77\xf0\xa0\xbb\xd7\xd6\xce\x2d\x4e\xe0\xa7\x65\xa2\xa1\x87\x1c\x0f\x1d\xd2\x61\xde\x3c\x0a\x19\x27\x7f\x9b\x76\xab\xea\x53\xaa\x35\xc8\xea\xbe\x8b\x55\x5c\x80\xa3\xdd\x24\x56\x48\x02\x2a\x3a\x21\x17\x13\xab\x4d\x5e\xe7\xf0\x4c\x4f\x21\xb2\xcf\xb8\x89\x72\xf1\xff\x88\xb4\x42\x83\x5e\x6b\x0b\x58\x63\x25\x1f\xc7\xac\xc2\x77\x38\x1a\xfa\xfe\x13\x88\x03\xa4\xd5\x27\xcd\x17\xc1\x58\x66\xde\xed\x8f\xa2\x96\xa2\x35\x2c\x63\x83\x6f\xcc\x1b\xd9\x0f\x26\x7a\x38\xfc\xd4\x0c\xd5\x71\x74\xad\x6e\xc0\x69\xee\xba\xe6\x6e\x80\x46\x8a\x19\xed\x7d\x84\xfd\xa0\x59\x8f\xbd\x96\xf2\xdf\xd8\xdb\x9a\x0f\xf3\x9f\x3f\x44\xe6\x94\x31\x15\xa8\xf3\x55\x67\x4d\x2b\xa5\xfd\xf4\xd8\x44\xef\xfc\xf0\xf8\xa8\x5f\x1e\xf2\x70\xd6\xdb\x23\x89\x82\x40\x58\x9f\x88\xf7\xaa\x6c\x6c\xeb\x6e\x38\x02\x2f\xdb\xe7\x83\x83\x12\xd8\xc5\x34\x2d\x7a\xa9\xfc\x09\x00\x00\xff\xff\xbd\x29\x0e\x72\x25\x09\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 2341, mode: os.FileMode(420), modTime: time.Unix(1471241125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x97\x4f\x8f\xdb\xc8\x11\xc5\xcf\xe2\xa7\xe0\x0a\xd8\x40\x02\x26\x1a\xfe\xff\x63\xc0\x97\xb5\x1d\xc0\x87\xf5\x02\x59\xdf\xa2\xc0\x68\x92\xdd\x0a\x11\x8d\x38\x16\x35\x1b\x8d\x17\xfe\xee\xa9\x5f\x57\x6b\x66\x6c\x67\xec\x4b\x06\xe0\x88\xec\xae\xae\x7e\xf5\xea\x55\x35\x79\x7d\x1d\xbf\x9a\x06\x1b\xef\xec\xc1\x1e\xcd\xc9\x0e\x71\x77\x1f\xef\xa6\xbf\x76\xe3\x61\x30\x27\xb3\x89\xc4\x60\x9e\xee\x8e\xbd\x9d\x5f\x70\x3f\x74\xd7\x37\xe3\x4e\x2c\xc7\xe9\x30\x5f\x27\x49\xfa\x61\x3c\x8c\xa7\xd1\xec\x37\xf3\xc7\xfd\xb7\x06\x17\x37\xbb\x89\xb9\xd7\xbf\xc5\xef\x7e\x7b\x1f\xbf\x79\xfd\xf6\xfd\x4f\x51\x74\x6b\xfa\x7f\x9b\x9d\x8d\x1f\xcd\xa3\x68\xbc\xb9\x9d\x8e\xa7\x78\x15\x2d\x96\xdd\xfd\xc9\xce\x4b\xb9\xe9\xa7\x9b\xdb\xa3\x9d\xe7\xeb\xdd\xa7\xf1\x96\x01\x77\x73\xe2\x67\x9c\xf4\xff\xf5\x38\xdd\x9d\xc6\x3d\x0f\x93\x5f\x70\x6b\x4e\xff\xba\x76\xe3\xde\x72\xc3\xc0\x7c\x3a\x8e\x87\x9d\x9f\x3b\x8d\x37\x76\x19\xad\xa3\xc8\xdd\x1d\xfa\x38\xc0\xfb\xbb\x35\xc3\x8a\x9b\xf8\x1f\xff\x64\xdb\xab\xf8\x60\x6e\x6c\xac\xcb\xd6\xf1\xea\x32\x6a\x8f\xc7\xe9\xb8\x8e\xff\x8c\x16\xbb\x4f\xfe\x29\x7e\xf1\x32\x06\xd5\xe6\x9d\xfd\x0f\x4e\xec\x71\xe5\x61\xf3\xfc\xcb\x9d\x73\xf2\x8c\xdb\xf5\x3a\x5a\x8c\xce\x2f\xf8\xe9\x65\x7c\x18\xf7\xb8\x58\x1c\xed\xe9\xee\x78\xe0\xf1\x2a\x96\x90\x36\x6f\xf0\xee\x56\x4b\x1c\xc5\x3f\x7f\x7c\x11\xff\xfc\xc7\x52\x91\xf8\xbd\xc4\xc7\xe7\x28\x5a\xfc\x61\x8e\x71\x77\xe7\x62\xdd\x47\x37\x89\x16\x1f\x14\xce\xcb\x78\x9c\x36\xaf\xa6\xdb\xfb\xd5\x5f\xc4\xe6\x4a\xb0\xc9\xaa\x7e\xff\xe6\x82\x74\xf3\x6a\x3f\xcd\x76\x25\xe1\xff\x9f\xf0\xe0\x46\xfd\x3f\xe3\x48\x0c\x15\x77\x18\x14\x58\x9b\x5f\x80\xbe\x5a\x5f\x61\x11\xc9\xdc\xe9\xfe\xd6\xc6\x66\x9e\xed\x09\xca\xef\xfa\x13\x5e\x7c\x7c\x21\x1f\xb2\xcd\xc1\x4d\x71\x3c\xcd\x9b\xbf\x49\x5a\xdf\xca\xc3\xc3\xba\x90\xc2\xcb\xf8\x13\x0f\x3e\x87\xf2\xa7\x69\x8c\x16\xf3\xf8\xc9\x3f\x8f\x87\x53\x55\x44\x8b\x1b\x64\x1f\x3f\x38\xfd\x55\x1e\xfd\xe0\x7b\x51\x48\x8c\x4c\x36\xdc\xb1\x8f\x97\xca\xca\x8d\x5f\xef\xb5\x8e\xdf\xc9\x16\xab\x75\xd8\x81\x3d\x43\x94\x6e\xdc\xb0\xbb\x2c\x7e\x7e\xed\xef\x02\x47\xd6\x7a\x34\x5f\x2e\x05\xe8\x77\x97\x82\x55\x96\x3e\x41\xfe\xa5\x03\x42\xfb\x91\x03\x82\x13\x1f\x0f\x81\x7e\xe3\x21\x44\xff\xbc\x93\xb7\xf3\xeb\xf1\x28\x2e\xba\x69\xda\x3f\x5d\x6d\xf6\xf3\x0f\x22\xbf\x9f\x35\x70\x7b\x74\xa6\xb7\x7f\x7e\x7e\xb2\x3a\x48\x02\x95\x7f\x18\xba\x5f\x1f\x5a\xc3\x93\x4e\xf3\xfb\xc7\xbd\x08\x5d\x95\xb1\x5a\x6e\xcf\xa9\xdb\x9e\x9b\x6e\x7b\x4e\x1a\xb9\x92\x70\xb5\xdb\x73\x65\x65\x3c\x8c\x39\xb1\x31\xc5\xf6\x5c\x56\xdb\x73\x31\x6c\xcf\x75\xbe\x3d\xb7\xb2\x26\xef\x65\xbd\xcc\x77\x62\xeb\x64\x2c\x93\x31\x27\x36\x15\x57\xbd\x3d\x0f\x32\x5e\x8b\x0f\x1b\xd6\xf9\x31\x23\xf7\x62\x57\xc8\x5c\x2a\x73\xa6\xd3\xfd\xb8\x1a\xb1\x4b\x64\x9f\x5a\x7c\xe6\xe2\xcf\xca\x58\x51\x8a\x8d\xdc\x37\x32\x56\x66\xba\x47\x92\xca\xb8\x5c\x4e\xe6\x7b\xf1\xd1\x8b\xdf\x0e\x8c\x4e\xd7\xb7\x32\x56\xc9\x7d\x25\xf8\x8c\xf8\x1c\x4a\xb5\xaf\xc4\x4f\x25\xeb\x5b\x99\xab\x89\x43\xe6\x5c\xad\x73\x5d\xa7\xfb\x60\x9b\x08\x46\x27\xf8\x12\x19\x1b\x5a\xf5\xdb\x88\xdf\x4a\xae\xb4\xd0\x75\x9d\xac\xc9\x32\xb5\xcb\x8d\xfa\x49\x64\x3c\x87\x3f\x19\xcb\x64\x9d\x13\x5f\xb9\xd8\xa4\x32\x5e\x8b\x7d\x09\x17\x82\xc9\xca\x58\x22\x73\x5d\xa2\xfe\x2c\x3c\xd7\x6a\xef\x64\xae\x11\x1b\x87\xcf\xc0\xad\x91\xb9\x54\xc6\x3a\x99\xeb\x04\x77\x2e\xf6\x19\xf3\x72\x9f\xc9\xfa\x42\x9e\x9d\xcc\x67\xa9\xee\x83\x2d\x38\xac\x51\xbe\x5a\xf9\x6d\xc4\xb6\x04\xbf\xf8\x6a\x52\xe5\xdd\x10\xe3\xa0\x9c\x95\x72\xdf\xc2\xbb\x53\xec\xe4\x08\x8c\x3d\x71\xcb\xbe\x39\x38\x7a\xc5\xe8\x73\x50\x2b\x37\x9d\xf8\xae\xe4\xea\x65\x6d\x2b\xbe\xcc\xa0\xdc\x97\xc4\x22\x76\x69\xaa\x5a\x1a\xe0\x2b\xd7\xdc\xb4\x95\x72\x8b\x2e\x7a\xab\x58\xfb\xc0\x37\x9a\xc8\x6a\x8d\xa5\x29\x55\x9f\xc6\xa8\xdf\x72\x50\xdc\xb9\xac\xcb\x7a\xcd\x79\xdd\x2b\x0f\xe4\x64\xc0\x6f\x1e\x34\x20\x97\x13\x5f\x79\x11\x74\x24\x31\x14\x41\x7b\xbd\xd1\xbc\xd4\xfc\xa6\xaa\x57\xaf\xf5\x4c\xf7\x4b\xf0\x1b\x38\x40\xe7\x9e\xb3\x52\x31\x59\xf9\x2d\x65\x6e\xa8\xb5\x26\xda\x5e\x71\x91\x8f\x61\xd0\x7d\xc0\xd4\xc3\xd9\xa0\xf1\xd7\xa5\xe2\x83\xd7\x94\xbc\xcb\xda\xd2\xa9\x6e\xd1\x43\x5b\x6a\x6e\x4b\xf1\xd1\xb5\x1a\x47\x0f\xa6\x4c\x73\xd2\xf5\xaa\x7d\xb4\x9e\xb7\xca\x2b\x5c\x97\xe8\xb9\xd4\xdc\x51\x0b\x95\x5c\xad\x55\x4c\xe4\x8d\xcb\xeb\xa3\x7b\xd4\x6a\xda\x6a\xec\x3e\x47\xcc\x57\xaa\x35\x78\x68\x53\xe5\x8d\xbd\x88\xbf\x0b\x5c\xd6\x97\x9a\x03\x5b\xae\x71\x90\xc7\xa2\x50\x3d\xa2\xd3\x96\x58\x64\xce\x70\x1f\xea\xd4\xa4\xba\x4f\xd7\xe8\x7c\x0d\x27\x9d\xc6\x9b\xb1\xde\x69\x6c\x5e\xe3\xa9\xd6\x43\x15\xf4\x41\xce\x58\xd7\x55\x9a\x7f\xf2\x80\x8e\xb2\x52\x79\x85\x1f\x70\xd2\x57\xca\x5e\x35\x88\x5e\xf1\x0f\x2f\x68\x63\x70\x9a\x33\xea\x8e\x9c\x13\x4f\x63\xb4\x07\xc0\x4d\x91\x2b\x07\x8c\x61\x4b\x1d\xc1\x37\x31\xa6\x21\x6e\x2e\xea\x88\x38\xc9\x07\x79\xa4\x96\x3a\x78\xea\xd4\x77\x61\x1e\x6b\x85\x7a\x22\xb7\x99\x55\x0d\xf4\xa5\xe6\x0c\xbd\x92\x1b\xb4\xe4\xfb\x60\xd8\x03\x5f\xbe\x0f\xca\x73\x41\x0d\x87\x1a\xa2\x07\xa1\x25\xea\x28\xcd\xb4\x56\xd1\x1e\xfd\xac\x27\xd7\x83\xd6\x53\x0e\xaf\x85\xf6\x0c\x62\x6e\x43\xaf\x21\x8f\xf0\x8a\xfe\xd0\x54\x95\x28\x2e\x2e\xf2\x48\x3d\x0f\x9d\xe6\x1c\x3d\xd1\xdb\xe1\x17\xbc\x99\x0b\xfe\x9d\xd6\x04\xb8\xd0\x36\xb1\x12\x07\x1c\x93\x2b\x6a\xbf\xbb\xf4\xd7\x56\x35\x03\x5f\x55\xc0\xdc\x50\x37\x2e\xe4\x25\xe8\xac\xb1\xda\x97\xe9\xa5\xbe\x6f\x10\x3b\xb5\x96\x68\xac\xe8\x85\xb3\x88\x7c\xa4\xb9\x6a\xcb\xc0\x63\xaa\x3d\x87\xbe\xcb\x99\x40\x8e\x3d\xb7\x85\xf6\x75\xee\xd1\x0e\xba\xf2\xcf\x2e\xd4\x72\xa2\xfd\x8b\xf3\x85\x31\x78\x40\x4f\x70\x94\x84\x33\x08\x4e\x7c\xcf\xa6\xce\xea\xa0\x9b\x4c\xeb\xb3\x0c\xf5\x5a\xd7\x01\x4b\xa2\x67\x05\xf5\x3f\x84\xfe\x45\xce\x38\xcf\x6c\xa2\xbd\x9a\xf8\xc1\x8c\xa6\x9b\xd0\xbb\xe9\x29\xa9\xd8\x0d\xd4\x5e\xaa\x67\x23\xe7\x27\x79\xa6\x26\xe9\x79\xb5\x53\x9d\xa3\x31\x13\x74\x47\x9c\xe0\xcd\x4b\xe5\xca\x6b\xd1\xea\x99\x0d\x36\xb4\xcf\xd9\xe8\xcf\xae\x70\x1e\xf8\x73\x3a\xf4\x33\xfa\x12\xe7\x13\x75\x80\xf6\xe0\x14\xdf\xbe\x6e\xc0\x1c\xe2\x22\xc7\x45\xa8\x17\x7a\x51\x1f\xea\xb6\x69\xb5\x6e\x5d\xaa\xef\x01\xf4\x49\xb4\x8f\x36\x9b\x5c\x7d\x50\x4f\x49\xa8\x05\xb8\xcf\x42\xdf\x86\x3f\x13\x7a\x21\xfc\x71\x6e\xa5\x26\x9c\x6d\x56\xb1\xf8\xbe\x9b\x6b\x2f\x45\x47\xf0\xd0\x0f\x8a\xb5\x0f\xb5\x4b\x7f\x86\x2f\x3b\xa8\x9e\xe0\x16\x9d\xf3\x0b\x2f\xe4\x8d\x7d\xc1\x83\x7e\x7a\xde\x4b\xc2\xd9\x0d\xef\xf4\x38\xdf\xeb\xc3\x39\x39\x50\xa7\xbd\xee\x87\x0e\xa8\x1f\x7f\x6e\x59\x3d\xc7\xe8\xa3\xd6\xaa\xbe\x6d\xa8\x0b\x38\x2e\x2a\xed\x15\xe4\x0b\x2c\xbc\x43\xf0\x5e\xc0\xf9\x83\x2e\x38\x17\xc0\x47\xaf\x00\x1f\x67\x39\x5a\x1a\x9a\x50\x6b\x46\xf1\xf0\xae\xc4\x3b\x08\x67\x2d\x3d\x94\x3d\xa8\x57\x7a\x30\xe7\x83\x69\xd4\xc6\xd7\x43\xad\xb9\xf2\xfd\xb4\xd4\xbd\x5c\xa1\x3e\xfd\x5a\xa7\x31\x91\x43\xce\x3b\x13\xf4\x9c\x5a\xdd\x9f\x77\x29\x74\xca\xfe\xf4\x0b\xf2\x49\x1f\xf3\xf5\xd6\x28\x0e\x72\xc0\xfb\x0b\x3a\xf3\xb5\xc9\x3b\x4a\xe8\xb7\xf9\x45\x47\x4e\x7d\xa0\x97\x26\x70\x4d\x8d\x83\xe3\x52\x87\xd4\x01\x3c\x53\xcf\x60\xf2\xef\x75\xc9\xe3\x3b\xa4\x0b\xdc\x70\x7e\x50\x6f\xe8\x0a\xad\x3c\xda\x2d\x2f\xdf\x96\xcf\xbf\xbd\x86\xef\x9f\xff\xf5\x5d\x79\xf9\x4a\x7a\xf2\x5d\x2a\x1f\x54\xdf\x79\x13\xbe\x92\xe9\xe5\x77\x3f\xca\x97\x62\xb2\x7e\xf8\x8c\xf9\xda\xd3\x7f\x03\x00\x00\xff\xff\x8c\x95\x87\x4d\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1471241204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

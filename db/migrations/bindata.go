// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4d\x73\x9b\x30\x10\xbd\xeb\x57\xec\x0d\x3c\x8d\x0f\xed\x4c\x7b\xf1\x09\x63\x35\x61\x42\x20\x11\xd0\x99\x9c\x18\x45\x6c\x6b\xc5\x20\x28\x1f\x49\xfa\xef\x2b\x01\x71\xfc\x81\x63\xfb\xb0\x63\xed\x3e\xbd\xdd\x7d\xac\x76\x3e\x87\x2f\x85\xfc\x53\xf3\x16\x21\xa9\x88\x3e\x46\x0f\x3e\x48\x05\x0d\x8a\x56\x96\x0a\xac\xa4\xb2\x40\x36\x80\x6f\x28\xba\x16\x33\x78\x5d\xa3\x82\x76\xad\x5d\xc3\x3d\x03\xd2\x07\x5e\x55\xb9\xc4\x8c\xb8\x8c\x3a\x31\x85\xd8\x59\xfa\x14\x44\xde\x3d\x11\x9b\x80\xfe\xc9\x0c\x96\xde\x75\x44\x99\xe7\xf8\x70\xcf\xbc\x3b\x87\x3d\xc2\x2d\x7d\x84\x20\x8c\x21\x48\x7c\xff\xaa\x87\x29\x5e\x20\xfc\x72\x98\x7b\xe3\x30\xb0\xbf\x7d\xff\x31\x3b\x00\xe4\xc8\x33\xac\xf7\x21\x43\xa4\x91\x2d\x7e\x9d\x0a\x94\x79\x96\x1e\xf3\x0e\x31\x51\x16\x05\xaa\x76\x3f\x44\x66\x0b\xb2\xdf\x48\xc6\x95\xd0\x59\x2f\x6e\x65\xe4\xce\xb6\x39\x0f\x5a\x99\xcf\xe3\x70\x15\x42\xc1\x37\x08\x9d\x92\x7f\x3b\x24\x97\xb5\xdf\x74\xf5\x59\x4c\xc5\xdb\xba\x54\xff\x0a\x29\x26\x65\xc2\xb7\x13\x45\x91\xf1\xb6\xac\x53\x91\xf3\xa6\x39\x05\x33\xa8\x67\xf5\xfc\x39\x68\xe0\xaa\xf1\x25\x3d\x28\x79\xb7\x94\xb2\xab\xc5\x61\xa0\x8f\xb8\x61\x10\xc5\xcc\xf1\x82\x78\x94\x3e\x4d\x8d\x9a\xe9\xa0\x15\x24\x81\xf7\x90\x50\xb0\x8d\x6f\xe4\x9a\xb8\xa1\x3b\x4d\x5f\x78\xde\x61\x93\x8a\x35\x8a\x0d\xb8\x37\xd4\xbd\x05\xdb\x28\xa0\x27\xdc\xb6\x0a\xeb\x0a\xac\xdf\xd6\xec\x34\xc5\x87\x18\x93\x4c\x3b\x5a\xf5\x84\x8e\x21\x5c\x1a\xe3\x1a\xb3\x32\x86\x7e\xc6\xbf\x95\x71\x92\xfe\x43\xe4\x9e\x7d\x79\x6d\xf8\x58\x64\xec\x9d\x31\xfd\x3f\x77\xad\x13\x9c\x9a\xd8\xd4\xbc\xc0\x71\x6c\x47\xcf\x30\xbd\xa6\x88\xf7\x8f\x05\x8c\xfe\xa4\x8c\x06\x2e\x8d\x46\xd0\xf8\x36\xf4\xdd\x33\xf0\xfe\x81\x9b\xdc\xbb\x7b\x64\x55\xbe\xaa\xf7\x4d\xb2\x5d\x23\xc6\x79\xd1\x22\xa9\xcb\x3c\xd7\xd1\x27\x2e\x36\x64\xc5\xc2\xfb\xe3\x7e\x16\xbb\xfe\x23\xc7\x00\x5c\x90\xff\x01\x00\x00\xff\xff\xc2\xb7\x82\x3e\xda\x04\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 1242, mode: os.FileMode(420), modTime: time.Unix(1471210404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1471210415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

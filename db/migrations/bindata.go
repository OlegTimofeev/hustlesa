// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4d\x73\x9b\x30\x10\xbd\xeb\x57\xec\x0d\x67\x1a\x1f\xda\x99\xf6\xe2\x13\xc6\x6a\xcc\xc4\x06\x47\x88\x76\xd2\x0b\xa3\x08\xb5\x56\x0c\x82\xf2\x91\xa4\xff\xbe\x12\xe0\x4f\x20\x31\x07\x0d\xec\xbe\x7d\xbb\xfb\xd0\xee\x74\x0a\x9f\x52\xf9\xa7\x60\x95\x80\x30\x47\xfa\x33\x78\x58\x81\x54\x50\x0a\x5e\xc9\x4c\x81\x15\xe6\x16\xc8\x12\xc4\x9b\xe0\x75\x25\x62\x78\xdd\x0a\x05\xd5\x56\x9b\xda\x38\x03\xd2\x1f\x2c\xcf\x13\x29\x62\xe4\x10\x6c\x53\x0c\xd4\x9e\xaf\x30\xf0\xa4\x7e\x42\x13\x04\xfa\x91\x31\xcc\xdd\xbb\x00\x13\xd7\x5e\xc1\x86\xb8\x6b\x9b\x3c\xc2\x3d\x7e\x04\xcf\xa7\xe0\x85\xab\xd5\x6d\x03\x53\x2c\x15\xf0\xc3\x26\xce\xd2\x26\x30\xf9\xf2\xf5\xdb\xcd\x05\x20\x11\x2c\x16\xc5\x39\xa4\xf5\x94\xb2\x12\x9f\x87\x1c\x59\x12\x47\x7d\xde\xd6\xc7\xb3\x34\x15\xaa\x3a\x77\xa1\x9b\x19\x3a\x6f\x24\x66\x8a\xeb\xac\x57\xb7\xd2\x71\xc7\x87\x9c\x17\xad\x4c\xa7\xd4\x5f\xf8\x90\xb2\x9d\x80\x5a\xc9\xbf\xb5\x40\xd7\xb5\x5f\xd6\xc5\x87\x98\x9c\x55\x45\xa6\xfe\xa5\x92\x0f\xca\x24\xde\x46\x8a\x42\x5d\xb4\x2c\x22\x9e\xb0\xb2\x1c\x83\x19\xd4\xb3\x7a\x7e\x1f\xd4\x72\x15\xe2\x25\xba\x28\xf9\xb4\x94\xac\x2e\xf8\xa5\xa3\xf1\x38\xbe\x17\x50\x62\xbb\x1e\xed\xa4\x8f\x22\xa3\x66\xd4\x6a\x05\xa1\xe7\x3e\x84\x18\x26\xc6\xd6\x71\x0d\x44\xe8\x4e\xa3\x17\x96\xd4\xa2\x8c\xf8\x56\xf0\x1d\x38\x4b\xec\xdc\xc3\xc4\x28\xa0\x6f\xf8\xc4\x4a\xad\x5b\xb0\x7e\x5b\x37\xe3\x14\x47\x31\x06\x99\x4e\xb4\x6a\x08\x6d\x43\x38\x37\x87\x63\x8e\x85\x39\xf0\x7b\xfc\x07\x19\x07\xe9\x8f\x22\x37\xec\xf3\x3b\xc3\x47\x02\x73\xae\xcd\xd1\xbc\x39\x5b\x9d\x60\xec\xc6\x46\x66\x02\xbb\x6b\xdb\x59\xda\xdb\x6b\x8a\xd8\xff\x2c\x20\xf8\x3b\x26\xd8\x73\x70\xd0\x81\xba\xd9\xd0\xb1\x1f\xc0\x9b\x01\xef\xe5\xd6\x43\x95\x8b\x4a\x36\xab\xa1\xcd\x7d\xfd\x02\xd0\x8f\x8e\x4c\xc6\x06\x67\x8f\x89\xcd\xc2\xa2\xee\x1a\x07\xd4\x5e\x6f\xe0\xa7\x4b\x97\x7e\x48\x1b\x0b\xfc\xf2\x3d\xdc\x8f\x30\xeb\xe1\x8c\xb4\xa9\x1b\x9d\x2e\xc0\x45\xf6\xaa\xf6\x2b\xf0\xb0\xff\x8c\xf1\xaa\x0d\x58\x64\x49\xa2\xbd\x4f\x8c\xef\xd0\x82\xf8\x9b\xfe\x8f\x98\x9d\xda\x7b\x86\x16\x78\x8e\x39\x0a\x39\x43\xff\x03\x00\x00\xff\xff\xf2\xd6\xbe\x0c\xab\x05\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 1451, mode: os.FileMode(420), modTime: time.Unix(1471236824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1471237284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

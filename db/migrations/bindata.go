// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5b\x53\xa3\x30\x14\x7e\xe7\x57\x9c\xb7\xd6\x59\x9d\x59\xdd\xd9\x7d\xf1\x89\xd2\xac\xa2\x14\x14\xe8\x3a\xee\x4b\x26\x42\xb4\x28\xb7\xe5\xe2\xe5\xdf\x6f\x02\x14\x48\x1b\x28\xca\x43\xa6\x3d\xf9\xce\x95\xef\x4b\x38\x39\x81\x6f\x51\xf0\x94\x91\x82\xc2\x3a\x55\xd8\x5f\xe7\xd6\x80\x20\x86\x9c\x7a\x45\x90\xc4\x30\x5b\xa7\x33\x08\x72\xa0\xef\xd4\x2b\x0b\xea\xc3\xdb\x86\xc6\x50\x6c\x98\xa9\xf6\xe3\x20\xf6\x87\xa4\x69\x18\x50\x5f\xd1\x6c\xa4\xba\x08\x5c\x75\x61\x20\xf0\xc2\xf2\x41\x99\x2b\xc0\x9e\xc0\x87\x85\x7e\xe1\x20\x5b\x57\x0d\xb8\xb1\xf5\x95\x6a\xdf\xc3\x35\xba\x07\xd3\x72\xc1\x5c\x1b\xc6\x71\x05\x8b\x49\x44\xe1\x8f\x6a\x6b\x97\xaa\x0d\xf3\xb3\x9f\xbf\x8e\x76\x00\x21\x25\x3e\xcd\x44\x48\xbd\x93\x07\x05\x3d\x95\x6d\x24\xa1\x8f\xf7\xe3\xd6\x7b\x5e\x12\x45\x34\x2e\xc4\x2d\xe5\xe8\x5c\x11\x1b\xf1\x49\xec\xb1\xac\x93\x5b\x69\x62\xfb\x6d\xce\xdd\x56\xa6\x35\x9b\x97\xd9\x41\x4c\x4a\x8a\x2c\x89\x3f\xa2\xc0\x93\x0e\x85\xbe\x8f\x96\x90\x92\x20\xc3\x5e\x48\xf2\x7c\x08\xc6\x51\xcf\xf1\xf3\x38\xa8\x8e\x95\xd1\x57\xbc\x53\x72\xbf\x94\xa4\xcc\xbc\xdd\x8d\x6a\x47\xb3\x4c\xc7\xb5\x55\xdd\x74\x9b\x41\x63\xcc\x67\x87\xcb\x38\xf8\x57\x32\x5e\x9a\xfa\xed\x1a\xc1\x9c\xdb\x9a\x58\x12\x0f\xd6\x29\x7e\x25\x61\x49\x73\xec\x6d\xa8\xf7\x02\xda\x25\xd2\xae\x61\xce\x27\xc0\xf8\x3c\x9f\x45\xb3\x63\x98\x3d\xce\x8e\x86\x43\x74\xc3\x90\x46\xea\xcd\xaa\x0a\xa8\xf2\x80\x0b\xbe\x68\x7c\x59\xf2\x05\x8d\xc5\x6f\xc7\x28\x0d\xdf\x0d\xb9\x8a\xbe\xb8\xe0\xf1\x6c\x87\xaf\x2b\xbe\x54\xbf\xb4\x0d\x4b\x30\xc4\x4f\xcc\xf5\xd6\x90\xb4\xb1\xd4\x5c\xe5\x45\x6c\x5f\x16\xd8\xe8\x37\xb2\x91\xa9\x21\xa7\x01\x35\x4a\x60\xbe\x07\xe0\x95\x9c\xf7\x72\x33\x09\xa5\xb4\x08\xaa\x83\xa0\xce\x3d\x5d\xee\xec\x61\x9e\xe1\xa0\x4c\x1a\x8c\xcf\x8f\x27\x57\x5f\x21\xc7\x55\x57\x37\x70\xa7\xbb\x97\xd6\xda\xad\x2c\xf0\xd7\x32\xd1\xbe\x07\x3f\x0c\x84\xa0\xfb\x75\xc7\x49\x14\xc4\xe4\xab\x65\xf7\xba\x3e\x34\xb5\x0e\xd9\xf0\x9d\x3d\x15\x01\x46\xd5\xc4\x9e\x88\x84\x94\x29\xa1\x64\xe7\x53\x3f\x78\x5b\xc3\x23\x3d\x84\x28\x3e\xd2\x2e\xcb\xe9\x77\xc9\x68\xd9\x0c\x76\xa4\x2d\x87\x91\xf7\x51\xd8\x16\xd7\x63\x7d\x37\x5f\x8c\x79\x1d\x22\xdb\xab\xca\x2a\xa2\x5b\xc6\x12\x5f\x99\x57\x9c\xdd\x26\xba\xdb\xfe\xd4\x0c\xd5\x71\x74\xad\x95\xd3\x70\xec\xb6\x03\x31\x41\xd7\xd8\x88\x58\xb9\x6d\x58\x67\x07\x33\x6f\x87\xb2\x93\xb9\x9d\xd5\x97\x33\x57\x6c\x15\xe9\x9a\xd1\xbc\x0c\x8b\x8e\xaa\x9f\x21\xeb\x97\xe9\xda\xfa\x7f\xfa\x38\xa9\x9e\xde\xb0\xc6\x3d\x3b\x60\xcf\xbb\xe9\x78\x4b\xb8\x1f\x67\x32\xc2\xb1\x6b\x27\x24\xec\x5a\x91\xd2\xbf\xd9\xc4\x8f\x59\x12\x0d\x21\x82\x9c\x9f\xcb\xb0\xb0\x2c\x43\x1e\x3e\x09\xe2\x22\x1f\xf2\x9e\xa2\x09\x00\x12\x86\xb8\xaa\x24\x1f\x2d\xa5\x07\x2b\x92\x1d\x90\x14\x35\x51\xbc\xa2\xcf\x44\x25\x0b\xac\xaf\x5f\x05\x96\xb1\x7d\xd2\x85\x38\x1a\x54\xd6\x90\x98\x43\xda\xf2\x84\x3b\x78\x4a\x46\xb9\x86\xa5\x03\x1b\xcd\xa8\xd4\x9a\xed\x7f\x50\x2f\x93\xb7\x78\xfb\x49\xdd\x7e\x4f\x73\xe3\xa4\x2f\xea\x2c\x09\x43\xb6\xfb\x40\xbc\x17\x65\x69\x5b\x37\xc2\x39\x70\xde\x37\xf5\x6e\x7f\xc1\xde\xa9\x4a\x30\xef\xe1\x6a\x7f\x11\xd3\x9d\x02\x82\xfd\x29\xc9\x52\xdc\x96\x99\x9f\x2b\xff\x03\x00\x00\xff\xff\x28\xf2\x71\x85\x41\x0c\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 3137, mode: os.FileMode(420), modTime: time.Unix(1472880925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5b\x6f\xd4\xc8\x16\x85\x9f\xdb\xbf\xc2\x44\xe2\xa8\x5b\xca\xe9\xf8\x7e\x41\xe2\x85\xcb\x91\x78\x00\xa4\x03\x6f\x93\x11\x2a\xdb\x55\x3d\xd6\x74\xda\xa1\xed\x30\x09\x88\xff\x3e\xfb\xab\x5d\x9d\x09\x83\x18\x5e\x26\x92\xe3\x4b\xed\xda\xd7\xb5\x56\xf5\xc5\x45\xfc\x7c\x1a\x6c\xbc\xb3\x07\x7b\x34\x8b\x1d\xe2\xee\x2e\xde\x4d\xff\xed\xc6\xc3\x60\x16\xb3\x8d\xc4\x60\x9e\x6e\x8e\xbd\x9d\x9f\xf0\x3c\x74\x17\x57\xe3\x4e\x2c\xc7\xe9\x30\x5f\x24\x49\xfa\x61\x3c\x8c\xcb\x68\xf6\xdb\xf9\xe3\xfe\x7b\x83\x93\x9b\xdd\xc4\xda\x8b\xb7\xf1\x9b\xb7\xef\xe3\x97\x2f\x5e\xbd\x7f\x14\x45\xd7\xa6\xff\xdd\xec\x6c\xfc\x97\x79\x14\x8d\x57\xd7\xd3\x71\x89\xd7\xd1\xea\xac\xbb\x5b\xec\x7c\x26\x0f\xfd\x74\x75\x7d\xb4\xf3\x7c\xb1\xfb\x3c\x5e\xf3\xc1\x5d\x2d\xdc\xc6\x49\xff\x5f\x8c\xd3\xcd\x32\xee\x79\x99\xfc\x86\x6b\xb3\xfc\x76\xe1\xc6\xbd\xe5\x81\x0f\xf3\x72\x1c\x0f\x3b\xbf\xb6\x8c\x57\xf6\x2c\xda\x44\x91\xbb\x39\xf4\x71\x48\xef\xff\xd6\x0c\x6b\x1e\xe2\x5f\x7e\x25\xec\x79\x7c\x30\x57\x36\xd6\x6d\x9b\x78\x7d\xfa\x6a\x8f\xc7\xe9\xb8\x89\xbf\x44\xab\xdd\x67\xff\x16\x3f\x79\x1a\x93\xd5\xf6\x8d\xfd\x03\x27\xf6\xb8\xf6\x69\xf3\xfe\xec\xc6\x39\x79\xc7\xed\x66\x13\xad\x46\xe7\x37\x3c\x7a\x1a\x1f\xc6\x3d\x2e\x56\x47\xbb\xdc\x1c\x0f\xbc\x9e\xc7\x52\xd2\xf6\x25\xde\xdd\xfa\x0c\x47\xf1\xe3\x8f\x4f\xe2\xc7\x9f\xce\x34\x13\x1f\x4b\x7c\x7c\x8d\xa2\xd5\x27\x73\x8c\xbb\x1b\x17\x6b\x1c\x0d\x12\xad\x3e\x68\x3a\x4f\xe3\x71\xda\x3e\x9f\xae\xef\xd6\xff\x11\x9b\x73\xc9\x4d\x76\xf5\xfb\x97\xa7\x4c\xb7\xcf\xf7\xd3\x6c\xd7\x52\xfe\xbf\x94\x0f\x6e\xd4\xff\x0f\x1c\x89\xa1\xe6\x1d\x3e\x4a\x5a\xdb\x67\xa4\xbe\xde\x9c\x63\x11\xc9\xda\x72\x77\x6d\x63\x33\xcf\x76\xa1\xe5\x37\xfd\x82\x17\x5f\x5f\x98\x87\x84\x39\xb8\x29\x8e\xa7\x79\xfb\x3f\x19\xeb\x2b\x79\xb9\xdf\x17\x46\x78\xfa\xfe\xc0\x83\x9f\xa1\xfc\xe9\x18\xa3\xd5\x3c\x7e\xf6\xef\xe3\x61\xa9\x8a\x68\x75\x05\xec\xe3\x7b\xa7\xaf\xe5\xd5\x7f\x7c\x2f\x08\x89\x81\xc9\x96\x27\xe2\x78\xa8\xac\xdd\xf8\xf7\x58\x9b\xf8\x8d\x84\x58\x6f\x42\x04\x62\x86\x2a\xdd\xb8\x25\xba\x6c\xfe\xf1\xde\x77\x92\x8e\xec\xf5\xd9\x7c\xbb\x95\x44\xff\x71\x2b\xb9\xca\xd6\x07\x99\x7f\xeb\x80\xd2\x7e\xe6\x80\xe2\xc4\xc7\x7d\xa1\xdf\x79\x08\xd5\xff\xd8\xc9\xab\xf9\xc5\x78\x14\x17\xdd\x34\xed\x1f\xee\x36\xfb\xf9\x27\x95\xdf\xcd\x5a\xb8\x3d\x3a\xd3\xdb\x2f\x5f\x1f\xec\x0e\x90\x00\xe5\x1f\x86\xee\xf5\xbd\x34\x3c\x50\x9a\x77\x1f\xf7\x02\x74\x45\xc6\xfa\xec\xf2\x36\x75\x97\xb7\x4d\x77\x79\x9b\x34\x72\x25\xe1\x6a\x2f\x6f\x2b\x2b\xdf\xc3\x37\x27\x36\x6d\x7f\x79\x5b\x56\x72\x89\x6d\x99\x5f\xde\x1a\xb9\x72\x59\x4b\x8b\xcb\xdb\x5a\x6c\x6d\x2d\xdf\x6b\xb5\xeb\xe4\x3e\x60\x2b\x7e\xda\x41\xef\x83\xdc\x07\xb9\xd7\x72\x77\xa9\xf8\xe6\x5b\x26\x7e\xc4\xde\x64\xea\x87\xcb\x4a\xcc\xdc\xc8\x5d\x7c\x16\x12\x2b\x13\x3f\x85\xac\x77\xb2\x96\x35\xea\xdb\x96\x72\x65\x7a\x1f\x24\xb7\x4a\xae\x24\xf8\x28\xc4\x26\xed\xd4\xb6\x17\x3f\x05\xb9\x8a\x8f\x9c\xb8\x12\xb3\x17\xbf\x2d\xfb\x9d\xfa\xcf\x89\x27\xdf\x9b\x54\xfd\x94\x72\x77\x52\x57\x2b\xbe\x5a\xf2\x14\xbf\x7d\xa6\x39\x95\xc4\x13\xfb\xd2\x69\xbd\xd4\xd8\x88\x6d\x26\x57\x53\x69\xed\x35\x31\xc5\xae\x95\x6f\x7d\xa1\x3d\xa2\x67\x46\xec\xf3\x5c\xfb\x5c\x53\x77\xa2\x39\x0c\xd4\x45\xff\xe5\xb2\xb2\xb7\x17\x9b\xa1\x53\x7f\x3d\x3d\x14\xbb\x4a\xfc\xb6\xb2\xcf\x48\x9e\x4e\xbe\xd9\x5c\x63\xf2\xdc\x88\x5f\x23\x3e\x2a\x59\x4b\x1b\xb5\x27\xbf\x21\xd5\x7d\xac\x75\x46\xe3\x96\xe4\x27\xb9\x55\x69\xd8\x9f\x68\x6d\x4e\xae\x42\xbe\xb5\xad\xe6\xd2\x53\xbf\xd5\x3b\xfe\x9b\x32\xcc\x38\xec\xf3\x18\x90\xef\x89\xf4\xb4\x63\x26\xf4\xac\xd4\xbe\x56\x46\x67\x42\x1d\x79\x19\x62\xd3\xab\x5c\xeb\xee\x53\xcd\x83\x19\x51\x5f\x2d\xef\x49\xa9\x18\x2c\x24\x7e\x51\x68\x9c\xc6\xa9\xaf\x4a\xbe\xb7\xd4\x68\x34\x9e\x13\x3f\x9d\x5c\xad\xac\x77\x60\x57\xf2\xaa\x2b\xc5\x69\x46\x7e\xe2\x2b\x27\xf7\x41\x7d\x81\x87\x4e\x9e\xdb\x5c\xf3\x20\x16\x58\xf0\xb9\xca\x3d\x13\x1b\x13\xe2\xb9\x5a\x7b\xcb\x5c\x6b\x6a\x14\x3f\x69\xa6\xf3\xcc\x99\x93\xd5\x99\x66\x43\xc0\x60\xe8\x69\x9a\x6a\x3d\xe0\x9a\x1a\x6c\xaf\x3d\x01\xdb\xc4\xa5\x5f\xcc\xa7\xa2\xd7\x9d\xc6\x05\x87\x70\x02\x4e\x79\x7c\xd2\xbf\x50\x2b\x3c\x61\x1e\x85\xec\x2f\xa4\xee\x46\xae\xac\x57\xce\xe4\x4e\xf9\xe2\x67\x44\x4d\x56\xe7\xd3\x59\xad\xa1\xad\x14\x7b\x6d\xa6\xb3\x62\x0e\xd4\x41\x1f\x98\x73\xdd\x2b\x16\x3c\xb6\x24\x46\xef\x34\x6f\xfa\x0a\x17\x4c\xa3\x3d\xa5\x3f\x60\x88\x39\x77\xbd\x72\x9e\xf9\xd1\x73\xb8\x01\xae\xfa\x5e\xd7\xa8\xa3\x19\x74\x5e\x45\xad\xf3\x21\xf7\x9e\xe7\x32\xf0\x46\xd6\xeb\x42\x6b\xa4\xb6\x2a\xd7\xfd\x55\xad\x18\xeb\x03\x17\x5d\xa3\x31\xf3\x4c\xf3\x6e\xc5\xa7\x43\x0f\x64\x7f\x6a\x14\x3f\xf0\x0c\x8e\xb0\x56\x36\x3a\xa3\xc4\xe9\xdc\xb2\x56\xb1\x9a\x05\x9c\x33\x8f\x3a\xd7\x99\xd0\x77\xea\x63\xce\xe8\xc5\x60\xd4\xce\xeb\x90\x55\x7b\xe6\x92\xd5\xda\x5f\x72\xc9\x7b\xc5\x1a\x18\xa0\x2e\xf2\x86\x8b\x79\x98\x21\xbd\x82\xab\xe8\x0c\xf5\xd1\x6f\xfa\x5f\x54\x81\xcf\x43\xc0\xae\x09\xb1\x33\xd5\x0c\xf8\xce\xcc\xaa\x46\x67\x82\x46\xb2\xe6\xb9\x80\xef\x52\xf5\x88\x1e\xa2\x65\x60\x1f\x5e\x79\xce\xb5\x8a\x09\xf6\xc3\x3f\x9b\xe8\x0c\xe1\xbb\xd7\x03\xa7\x3c\x66\xbd\x2c\x74\x66\xe8\x27\x7b\xbd\xe6\x05\x6d\x2a\x9c\xce\x00\xee\x0e\x01\x37\xd8\x81\x5d\x74\x09\x6c\x83\x73\x6a\xc7\x37\xba\x92\x56\xaa\x81\x5e\xa7\x99\x6f\xa6\x3a\x89\x36\xc1\x3f\x74\x2e\x49\x15\xcf\x60\xb7\x4a\x34\x0f\xb8\x47\x9e\xe0\x8a\xf9\x31\x03\xf0\xe4\x35\x51\xf6\x9a\x32\xe4\xd8\x68\xbf\x9a\x5c\x35\x92\x1e\xd3\xeb\x72\xd0\x33\xc1\xcf\x31\x55\x7d\x42\x27\xb0\x01\x6b\x60\xa3\xe9\x15\xcf\xf0\x20\x0b\xe7\x11\x39\x93\x17\x7d\x04\x87\x1e\x5b\xc4\x4e\x34\xd7\xee\xc4\xb9\x4a\xf1\x60\x06\xe5\x1a\xda\x38\x04\x1c\xc2\x83\x53\x0d\xf0\x2f\xa1\xcf\x85\xc6\x86\xcf\x68\x2a\xfe\xc1\x1a\x67\x10\xbd\xb5\xac\xc3\xf5\x52\x6b\x45\x07\xd1\x25\x74\x04\x4e\xc0\x5b\x78\xee\xcf\x9a\x41\x6b\x4c\x4b\xed\x1d\xd8\x19\x4a\xf5\xd3\x86\x73\x98\x78\xf0\x0e\x7c\xa3\x57\x55\x11\xce\xdc\x5c\x73\xaa\x1b\xd5\x19\xf0\x97\xe5\xea\xaf\x09\x67\x26\x71\xc1\xb8\xd7\x2f\xce\x19\x38\x01\xc6\x5b\xc5\x1f\x79\x50\x13\x3a\x6a\x82\xbe\x81\x23\xe6\x4a\xee\xe8\x04\x33\xf7\xb3\xaf\x95\x03\x9c\xe3\x79\xe8\x2f\x7d\xaf\xa9\x9d\xde\x65\xca\x4d\x6a\xe7\xfc\xcd\x8c\xea\x55\x19\xf4\x1e\xae\xb2\x87\xb3\xe6\xf4\x7b\x01\x6d\xe0\x9c\xa7\x47\xec\x75\x56\xf1\x47\x4e\xf4\x81\x33\x02\x6e\x99\xa0\xdb\xfe\x2c\x49\x82\xce\xa2\xfd\xd4\x9b\xaa\xae\x90\x1f\xb9\xd2\x33\xb4\x01\xae\xc0\x7b\x9e\xd1\x9a\x24\x9c\xc3\x70\xab\x39\xe1\x37\x57\x3b\xe6\x40\xbc\x36\xd8\x90\x1f\xb8\x67\x2e\xf4\x0c\xbd\xf1\x58\xe8\x03\x06\x3a\xe5\x3f\x78\x6d\x03\xce\x6c\xc0\x13\xf6\x43\xd0\xae\xda\xe9\x3d\x0f\x67\x38\x33\x1d\xe0\x6e\xa2\x3d\x61\x56\x79\xa7\x5c\x01\xbf\xdd\x69\x46\x8d\xf2\x15\x8e\xf3\x3b\xad\x0a\x78\xe4\xcc\x86\xa3\x9c\x8d\xe0\x9c\x33\x8c\x5e\x94\x46\x67\x36\x04\x9d\x66\xae\x60\x08\x3e\xa0\x2f\x5e\x27\x07\xcd\x93\xdf\x35\x6d\xd0\x36\x30\x41\x2e\x5c\x60\x1f\x2d\x4b\xad\xe2\x06\x6e\xf2\x5b\x8b\xb9\x92\x03\x1a\x45\xfe\xcc\x94\x35\xce\x5d\xfc\xa2\x81\x5d\xe0\x2e\xf9\x60\x0b\x8e\xe0\x35\x3d\x47\x8f\x38\x93\xc0\x48\x1b\x7e\x37\xa2\x11\x65\xe8\xa7\x3f\xd3\x9c\x9e\xd9\x68\x32\xfa\xe8\x7f\x1b\x3a\xc5\x0b\xba\xc8\xd9\x46\xdd\x60\x8f\x1a\x39\xf7\xe8\x29\xdc\x47\xe7\x4e\x1a\x86\x3e\x53\x83\xef\x7f\xa6\x3c\xa0\xbf\xbe\x9f\x46\xf9\xe5\x35\xb4\x0a\xf9\xe5\xe1\xf7\x48\x38\x1f\xc0\x5e\x1b\xce\x1c\x66\xc7\x6f\xaa\xcc\x05\x9c\xd4\xea\x07\xde\x17\x7f\x06\x00\x00\xff\xff\xd0\x86\xeb\xd6\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1472881095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

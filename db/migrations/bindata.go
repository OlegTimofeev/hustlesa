// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x4b\x53\xab\x48\x14\xde\xf3\x2b\xce\x2e\xb1\xc6\x54\x8d\x4e\xcd\x6c\x5c\x11\xc2\x28\x4a\x40\x81\x5c\xcb\xbb\xe9\x6a\xa1\x35\x68\xf3\xb8\x3c\x7c\xfc\xfb\xdb\x0d\x04\xe8\xa4\x21\xe8\x65\x41\x25\x7d\xbe\xf3\x9d\x47\xce\x77\xd2\x8b\x05\xfc\x15\x85\xcf\x19\x2e\x08\x6c\x52\x85\x7d\x75\xef\x4c\x08\x63\xc8\x89\x5f\x84\x49\x0c\xb3\x4d\x3a\x83\x30\x07\xf2\x41\xfc\xb2\x20\x01\xbc\x6f\x49\x0c\xc5\x96\x1d\xd5\x7e\x1c\xc4\xbe\xe0\x34\xa5\x21\x09\x14\xcd\xd1\x55\x4f\x07\x4f\x5d\x9a\x3a\xf8\xb4\x7c\x54\xe6\x0a\xb0\x27\x0c\x60\x69\x5c\xba\xba\x63\xa8\x26\xdc\x3a\xc6\x5a\x75\x1e\xe0\x46\x7f\x00\xcb\xf6\xc0\xda\x98\xe6\x69\x05\x8b\x71\x44\xe0\x87\xea\x68\x57\xaa\x03\xf3\xf3\x7f\xff\x3b\xd9\x03\x50\x82\x03\x92\x89\x90\xda\x92\x87\x05\x39\x93\x19\x12\x1a\xa0\x43\xde\xda\xe6\x27\x51\x44\xe2\x42\x34\x29\x27\x17\x8a\x58\x48\x80\x63\x9f\x45\x9d\x5c\x4a\xc3\x1d\xb4\x31\xf7\x4b\x99\x56\x6c\x5e\x66\x47\x31\x29\x2e\xb2\x24\xfe\x8c\x42\x5f\xda\x14\xf2\x31\x9a\x42\x8a\xc3\x0c\xf9\x14\xe7\xf9\x10\x8c\xa3\x5e\xe2\x97\x71\x50\xcd\x95\x91\x37\xb4\x97\x72\x3f\x95\xa4\xcc\xfc\x7d\x43\x65\xd1\x6c\xcb\xf5\x1c\xd5\xb0\xbc\xa6\xd1\x08\xf1\xde\xa1\x32\x0e\x7f\x95\x6c\x2e\x2d\xe3\x6e\xa3\xc3\x9c\x9f\x35\x5c\x12\x0f\x56\x29\x7a\xc3\xb4\x24\x39\xf2\xb7\xc4\x7f\x05\xed\x4a\xd7\x6e\x60\xce\x3b\xc0\xe6\x79\x3e\x8b\x66\xa7\x30\x7b\x9a\x9d\x0c\x53\x74\xcd\x90\x32\xf5\x7a\x55\x11\xaa\x9c\x70\xc9\x5f\x1a\x7f\xad\xf8\x4b\x1f\xe3\x6f\xdb\x28\xa5\xef\x9a\x5c\xb1\x2f\x2f\x39\x9f\xe3\xf2\xf7\x9a\xbf\xaa\x4f\xda\x96\x05\x18\x9a\x4f\xc4\xf5\xd6\x0c\x69\x73\x52\xcf\x2a\x4f\x62\xf7\x63\x81\xa3\xff\xaf\x3b\xba\xa5\xe9\x6e\x03\x6a\x94\xc0\x7c\x8f\xc0\x2b\x39\x1f\xc4\x66\x12\x4a\x49\x11\x56\x8b\xa0\x8e\x3d\x5d\xee\xec\x61\x9e\x74\x50\x26\x0d\x26\xe0\xeb\xc9\x33\xd6\xba\xeb\xa9\xeb\x5b\xb8\x37\xbc\x2b\x7b\xe3\x55\x27\xf0\xd3\xb6\xf4\x43\x0f\xbe\x0c\x04\xd2\xc3\xbc\xe3\x24\x0a\x63\xfc\xdd\xb4\x7b\x55\x1f\xeb\x5a\x87\x6c\xe6\x9d\x3d\xd5\x00\x8c\xaa\x89\x3d\x11\xa6\x84\x29\xa1\x64\xfb\xa9\x4f\xde\xe6\xf0\x44\x8e\x21\x8a\xcf\xb4\x8b\x72\xf6\xb7\xa4\xb5\xac\x07\x7b\xd2\x96\xc3\xf0\xc7\x28\x6c\x87\xeb\x4d\x7d\xd7\x5f\x84\x78\x1e\xe2\xb4\x57\x99\x55\x83\x6e\x9b\x2b\x74\x6d\x5d\xf3\xe9\xb6\xf4\xfb\xdd\x47\xcd\x54\x5d\xd7\xd0\x5a\x39\x0d\x73\xb7\x15\x88\x01\xba\xc2\x26\x88\x75\x84\x7d\x57\xf8\x1e\x7b\xdb\x8f\x3f\x63\x67\x49\x76\x5b\xe1\x20\xff\xe9\x2b\x61\x4a\x19\x43\x81\xfa\xa6\x69\xbb\x47\x14\x52\x46\xf2\x92\x16\x9d\x88\xbe\x22\xa3\x6f\x0b\xa9\xf5\xff\xf2\xa2\xab\x9e\x5e\x6f\x3a\xcf\x9e\x43\x67\x3f\x85\xc5\xc2\xb3\x57\x36\x93\xc0\x2b\x61\xe7\x05\xc4\x25\xa5\x1d\x53\x53\xfd\x4e\x16\xff\x9c\xcb\x64\xc1\xfe\x1c\x29\x66\x7f\x7e\x52\x91\x36\x46\xf4\x94\x25\xd1\x10\x22\xcc\xf9\x6f\x04\x4b\xdb\x36\xe5\xf4\x49\x18\x17\xf9\x90\xf7\x14\xe5\x02\x60\x4a\x51\x95\x49\x3e\x9a\x4a\x0f\x56\x24\x7b\x20\x29\x6a\xe2\x8a\x11\x7d\x26\xee\x1b\x61\xe0\xeb\x9f\x02\xc9\x86\x7c\x92\x56\x47\x49\x65\x05\x89\x31\xa4\x25\x4f\x5b\x0f\x47\x23\xca\xb7\x90\xb4\x61\xa3\x11\x95\x5a\xbf\xfd\x6b\xff\x2a\x79\x8f\x77\x17\xff\xf6\xd6\xcf\x0f\x27\xdd\xfb\xb3\x84\x52\x66\x7d\xc4\xfe\xab\xb2\x72\xec\x5b\x61\x27\x5c\xf4\x8f\x7a\x77\x14\xe1\xbc\x93\x9a\x70\x7c\x80\xab\xfd\x45\x4c\xb7\x11\x84\xf3\xe7\x24\x4b\x51\x9b\x66\x7e\xa1\xfc\x0e\x00\x00\xff\xff\x3b\xb9\x27\xb7\xe7\x0c\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 3303, mode: os.FileMode(420), modTime: time.Unix(1472760746, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\xdf\x6f\xdc\xc6\x11\xc7\x9f\x8f\x7f\x05\x23\x20\xc5\x1d\xa0\x9e\x8e\xbf\x49\x03\x7e\x89\xed\x02\x7e\x88\x03\x34\x7e\xab\x0a\x63\x49\xee\x5e\x89\x9e\x8e\xf2\xf1\x94\x4a\x0e\xf2\xbf\x77\x3e\x3b\x73\x8a\xd2\xc0\xcd\x4b\x04\x50\x5c\xee\xee\xcc\x7c\x67\xe6\x3b\x33\x77\x73\x93\xbe\x99\x47\x9f\xee\xfd\xd1\x9f\xdc\xd9\x8f\x69\xff\x94\xee\xe7\xbf\xf6\xd3\x71\x74\x67\xb7\x4d\xe4\xc2\x32\x3f\x9c\x06\xbf\xbc\x62\x3d\xf6\x37\x77\xd3\x5e\x6e\x4e\xf3\x71\xb9\xd9\xed\xb2\x4f\xd3\x71\x3a\x4f\xee\xb0\x5d\x3e\x1f\x7e\x7f\xe1\xa2\x66\x3f\x73\xf6\xf6\x87\xf4\xc3\x0f\x1f\xd3\x77\x6f\xdf\x7f\xfc\x26\x49\xee\xdd\xf0\x6f\xb7\xf7\xe9\xaf\xd7\x93\x64\xba\xbb\x9f\x4f\xe7\x74\x9d\xac\xae\xfa\xa7\xb3\x5f\xae\x64\x31\xcc\x77\xf7\x27\xbf\x2c\x37\xfb\x2f\xd3\x3d\x1b\xe1\xee\xcc\x6b\x9a\xf5\xff\xcd\x34\x3f\x9c\xa7\x03\x1f\x73\x14\xb8\x77\xe7\x7f\xdd\x84\xe9\xe0\x59\xb0\xb1\x9c\x4f\xd3\x71\x1f\xcf\xce\xd3\x9d\xbf\x4a\x36\x49\x12\x1e\x8e\x43\x6a\xf0\xfe\xee\xdd\xb8\x66\x91\xfe\xe3\x9f\x98\xbd\x4e\x8f\xee\xce\xa7\x2a\xb6\x49\xd7\x97\x5d\x7f\x3a\xcd\xa7\x4d\xfa\x73\xb2\xda\x7f\x89\x5f\xe9\xab\xd7\x29\xa8\xb6\x1f\xfc\x7f\x50\xe2\x4f\xeb\x08\x9b\xef\xef\x1e\x42\x90\x6f\xd4\x6e\x36\xc9\x6a\x0a\x51\xe0\x9b\xd7\xe9\x71\x3a\xa0\x62\x75\xf2\xe7\x87\xd3\x91\xcf\xeb\x54\x5c\xda\xbe\x43\x7b\x58\x5f\xa1\x28\xfd\xf6\xf3\xab\xf4\xdb\x9f\xae\x14\x49\xb4\x25\x3a\x7e\x49\x92\xd5\x4f\xee\x94\xf6\x0f\x21\x55\x3b\x6a\x24\x59\x7d\x52\x38\xaf\xd3\x69\xde\xbe\x99\xef\x9f\xd6\x7f\x91\x3b\xd7\x82\x4d\xa4\x86\xc3\xbb\x0b\xd2\xed\x9b\xc3\xbc\xf8\xb5\xb8\xff\x27\xe1\x41\x8d\xea\xff\x8a\x22\xb9\xa8\xb8\x6d\x53\x60\x6d\xbf\x03\xfa\x7a\x73\xcd\x8d\x44\xce\xce\x4f\xf7\x3e\x75\xcb\xe2\xcf\x84\xfc\x61\x38\xa3\x25\xfa\x67\xf9\x10\x33\xc7\x30\xa7\xe9\xbc\x6c\xff\x26\x69\x7d\x2f\x1f\xcf\x72\x96\xc2\xcb\xfe\x0b\x0d\x31\x87\xf2\xa7\x69\x4c\x56\xcb\xf4\x25\x7e\x4f\xc7\x73\x5d\x26\xab\x3b\x68\x9f\x3e\x2b\xfd\x5e\x3e\xe3\xe6\x47\x61\x48\x0a\x4d\xb6\xac\xb0\x13\xa9\xb2\x0e\xd3\xff\xda\xda\xa4\x1f\xc4\xc4\x7a\x63\x16\xb0\x69\x5e\x86\x69\x8b\x75\x11\xfe\xba\xec\x8f\x02\x47\x64\x23\x9a\xdf\x8a\x02\xf4\xff\x8a\x82\x55\x44\x5f\x20\xff\xad\x02\x5c\xfb\x23\x05\x38\x27\x3a\x9e\x1d\xfd\x9d\x06\xf3\xfe\xeb\x4a\xde\x2f\x6f\xa7\x93\xa8\xe8\xe7\xf9\xf0\x52\xda\x1d\x96\x3f\xf0\xfc\x69\x51\xc7\xfd\x29\xb8\xc1\xff\xfc\xcb\x0b\x69\xa3\x04\x2c\xff\x34\xf6\xdf\x3f\xb7\x86\x17\x9d\xe6\xc7\xcf\x07\x21\xba\x32\x63\x7d\x75\xfb\x98\x85\xdb\xc7\xb6\xbf\x7d\xdc\xb5\xf2\xec\xec\xe9\x6e\x1f\x6b\x2f\xfb\xb6\x17\xe4\x8e\x2b\x6f\x1f\xab\xfa\xf6\xb1\x94\xbb\x55\x21\xdf\xf2\x2e\xe5\x3c\x93\xfd\x51\xee\x06\xd9\xcb\x65\x6f\x90\x75\x2e\x4f\x9f\xc9\x5a\xee\x57\x72\xde\x8e\x72\x57\xf6\x06\x79\xd7\x83\xec\xc9\x93\x71\x9e\xcb\x5d\xd1\x51\x3a\x79\xc4\x4e\x9b\xe9\xd9\x20\x7a\x7a\x79\x3c\x38\xe4\xcc\xc9\x7e\x51\xc9\xba\x55\x3b\xbd\xbc\x0b\xb9\xd7\xc8\x13\x78\xe4\xee\x88\x0f\xa2\x7f\x27\xf6\x7c\xab\x78\xf3\x4c\xd7\xb5\xc8\x96\xb2\xce\xe5\xdd\xc8\x9d\xde\xf0\x76\xe0\x6a\x14\x73\x23\xef\x31\xb7\x58\x54\xaa\x37\x93\x77\x2b\xcf\x20\xfe\x67\x9d\xfa\x45\x9c\xa2\x0f\xb9\x9e\xa1\xaf\x91\xb7\x97\x3b\xe5\x60\xe7\xa2\x7b\x90\x77\x2b\x32\x15\xf1\x15\x2c\xa5\xac\x77\x72\xde\xcb\x59\x29\x32\x85\xf8\xd5\xca\xba\x20\xde\x62\x3b\xe4\x8a\x11\xbb\x3d\x71\x61\x5f\xbe\x7b\xf9\xae\xc3\xaf\xf2\x83\xd8\xea\x24\xae\x99\xe8\x18\xb1\x2f\x98\x32\xf6\x4b\xf5\xcb\x8b\x5c\x21\x6b\x57\xa9\xff\xe4\x92\x1c\x11\xfb\x91\xf8\x12\x8b\xa0\x36\x79\x57\xb2\xdf\x39\xc5\x13\x04\x73\x5f\x6a\x5c\xc9\x9b\x17\x3b\x3b\xd9\xef\x45\x67\xde\xa8\xfd\x5a\xd6\x75\xa7\x79\xea\x9d\x3e\xf8\xeb\x44\x36\x97\xfb\xe3\xa0\xba\x62\xee\x9d\xc6\x26\x33\x5c\xa5\xec\x35\x41\x39\x45\x8e\x83\x7c\x0f\xb2\x1e\xe5\x5e\xd7\xaa\x3d\x74\x13\x7f\xf2\xd0\x08\xde\xb2\x54\xd9\x56\xec\x7b\xa7\x1c\xa8\x64\xed\x64\xbd\x2b\x34\x8f\x3c\xe8\x85\xa7\x05\x5c\xe8\xf4\xac\x42\x2e\xd7\x75\x97\x6b\x3e\xba\x8b\xbd\x5c\x75\x62\xab\x60\xbf\xd0\x1c\x67\xb2\x9f\xc1\x39\xf0\x16\xca\x6d\xee\x83\x8d\x18\x54\x17\x4c\xe4\x2b\xd7\x58\xe7\x9d\x9e\x65\xf2\xb4\x72\xb7\x6a\xb5\x36\xda\x9d\xc6\xa6\x23\x7f\x95\xf2\x8d\xb8\xc1\xf7\xa1\xd0\x1c\x12\xef\x82\xbc\x37\x5a\x5b\x5d\xa7\x75\x16\x39\x26\xb6\xeb\x5a\x39\xca\x9d\xdc\x38\x18\xf9\x21\x72\x81\x1a\x1d\x14\x07\x3c\x03\x27\xb9\x86\x4b\xdc\x27\xaf\x9c\xb5\x66\x8f\xfc\x05\xe3\x83\x6f\x6c\xbd\x53\x1d\xae\x50\x7b\xf8\xd5\x35\x1a\x7b\xe2\x07\x6f\x3a\xb0\x53\x83\x8d\xe2\x8d\xe7\xd8\x08\x7a\x46\xad\x0d\x56\x8b\xd4\x03\x71\xa3\xe6\xe0\x5b\x6d\xf5\x1c\x2a\xe5\x29\x9c\x85\x4f\xf0\xda\xd5\x7a\x87\x9a\x09\x99\xc6\x3a\xd6\x3a\x39\xf3\x9a\x53\xf4\xa3\x03\xbf\x73\xd1\xed\x0b\xed\x4d\xe0\xc5\xa7\x6e\xd0\xf8\xd2\x1f\x62\x5f\x41\x36\x68\x0c\x89\x57\x63\xbe\x83\x9b\x98\x91\x6b\xe2\xd3\x37\x5a\x33\x91\x8f\xd4\xef\xa8\x79\x19\x1b\xd5\x0f\xcf\xe9\x0b\xf0\x09\x8e\x92\xff\x46\x64\x0b\xaf\xdc\x24\x2f\xae\xd1\xfa\x6d\x7a\x8d\x35\xf9\x25\xc6\xf4\xc7\xc6\x6a\x0e\xbe\xe1\x0f\xfe\x83\x85\xfa\xa3\xf7\xc1\x5f\xb0\x37\xd8\xb1\x3e\x01\xef\xc0\xe3\x46\xad\x45\xf8\x40\x7f\x8e\x3e\x07\xed\x71\xf4\x4b\x67\xfd\x06\x9b\xb1\x0e\xe1\x46\xd0\x27\x72\xd9\x64\xf0\x13\x5e\x71\xaf\x0f\x6a\xb3\x34\x9e\xd0\x43\xf0\x3b\x6b\x8d\x27\x41\xe3\x01\xce\xb1\xb6\x5a\x27\x7e\x85\xf6\x3a\x7a\x60\x6e\xf7\x6a\xd3\x0b\xb7\xe9\xd9\xe4\x22\xce\x08\xab\x3f\x7a\x42\xc4\x68\x73\x84\xfa\xa3\x8f\x77\xa5\xc6\x92\xfe\xd2\x06\x5d\x33\x33\xc0\x9c\x99\x7d\xe2\x4a\x0e\xe3\x4c\xe8\x34\x56\xe4\x92\x98\x53\x93\x2d\x39\x19\xb5\x6f\x79\xf8\x0a\x4e\xb8\xee\x35\xe6\x70\x96\x3e\xc4\x2c\xe0\x4d\xef\xf0\xbd\xc6\xb8\x28\xd4\x37\xf0\xb1\xe7\x3a\x7d\x57\xbd\xcd\x94\x46\x79\x09\x26\x72\x4a\x0c\xc9\x17\xb5\x1d\xe8\x1b\xf0\x48\xe4\x43\xa9\x1c\x87\x67\xf4\x5c\x62\xc5\xdc\x61\x7e\x44\xae\x0d\x2a\x0b\xdf\x76\xd6\x1f\xa9\x8d\xd1\xea\x1d\xdd\x91\x07\xc1\xec\x3b\xed\x45\xf0\x1c\x9e\xc1\xa3\xc2\xfa\xfb\xee\x52\x9f\x4e\xfb\x17\xfb\x91\x3f\xb5\xce\x15\x38\x4e\xcd\xd4\xa5\xce\x41\x7c\x8a\x39\xf6\xaa\x0b\xdc\xf4\x2b\xe2\xc6\x3c\x88\xbd\x20\x28\x8e\xd8\x63\x73\xed\xc3\xd4\x03\x75\xdc\x53\xcf\x83\xce\x07\x70\xe2\x13\x5c\xc1\x2f\x74\x0d\x8d\x72\x10\xac\xb1\x27\xf7\x3a\xcf\xa8\x7b\x6a\xe7\x32\xef\x9a\xd6\xfa\x7e\xae\xb6\xe8\xd9\xb1\xb7\x55\x3a\xf7\xe0\x45\xd7\x5b\xac\xc9\xbb\xe5\x94\x5e\x0e\x6f\x2e\x71\x8e\xb3\xfd\x32\xa7\x47\x9d\x4b\x95\xd9\x1a\x77\x1a\x3b\xf8\x43\xbe\xe1\x2a\x7e\xc4\xb9\xdd\xda\xfc\x74\xf6\x3b\xa3\xd6\x3d\xe6\x51\xc4\x37\x2a\xa6\x60\x38\x1b\xfb\x0d\x01\x2f\xe9\x6b\xe4\xac\x6e\x94\x83\x4d\xad\x1c\xf1\x99\xce\x65\xb8\x0e\x46\xb0\xc3\x3d\xb8\xca\xec\x28\xad\x1e\x82\xd3\xfc\x50\x3f\xfc\x8e\x01\x3b\x3d\x97\x3a\x62\x06\x52\x97\xcc\x9f\xcc\x72\x0d\x2e\x78\x94\xe7\x5a\x4b\xd4\xfa\xce\x72\x49\x3d\x62\x0f\x19\x97\xeb\xef\x2e\xb8\x1e\x67\x43\xb0\x59\x1b\x74\xaf\x34\xcc\xe0\x8f\xbf\x5b\x2a\xf5\x9d\xdf\x1c\xf8\x5a\xd4\x3a\xe7\x2e\x75\x07\x76\x6f\x33\x90\xda\xe3\xf7\x11\x75\xcb\x5c\xa2\x87\xf1\x04\xfb\xed\x06\x56\x70\x74\xd6\xcf\xe1\xdb\x90\xe9\x0c\xa2\xaf\xc3\xc3\xda\xe6\x3b\xbf\x49\xf0\x35\xce\x8c\xda\x7c\x2e\xb5\xfe\x73\x9b\x0b\xcc\x1d\xfc\x1d\x6c\x26\x45\x9f\x4b\xed\x79\xe4\x01\x39\x5f\x59\xad\x75\xda\xa7\x32\x9b\x59\xf4\xd4\x60\x31\xe5\xce\x2e\xd7\x7e\x4d\x1e\x98\xcf\xcc\x8c\xd2\x7a\x75\xec\x6d\xee\xc5\x4c\xb0\xfa\x23\x8f\xb9\xfd\xbe\xf4\x36\x23\xa9\xab\xe6\xd2\x37\xf0\xeb\x12\x23\xeb\x21\xf4\x55\x6c\xd1\x4b\x5a\x7c\xfd\x6f\x00\x00\x00\xff\xff\x55\x3c\xb6\xbe\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1472761509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

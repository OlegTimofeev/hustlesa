// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x57\x4b\x53\xab\x48\x14\xde\xf3\x2b\xce\x2e\xb1\xc6\x54\x8d\x4e\xcd\x6c\x5c\x11\xc2\x28\x4a\x40\x81\x5c\xcb\xbb\xe9\x42\x68\x0d\xda\x34\x5c\x1e\x3e\xfe\xfd\xed\x06\xc2\xb3\x21\xe8\x65\xd1\x65\xfa\x7c\xe7\x3b\x8f\xee\xef\x20\xab\x15\xfc\x15\x06\xcf\x89\x9b\x61\xd8\xc5\x12\xfb\x69\xdf\xe9\x10\x50\x48\xb1\x97\x05\x11\x85\xc5\x2e\x5e\x40\x90\x02\xfe\xc0\x5e\x9e\x61\x1f\xde\xf7\x98\x42\xb6\x67\x5b\xa5\x1f\x07\xb1\x1f\x6e\x1c\x93\x00\xfb\x92\x62\xa9\xb2\xa3\x82\x23\xaf\x75\x15\x3c\x92\x3f\x4a\x4b\x09\xd8\x13\xf8\xb0\xd6\x2e\x6d\xd5\xd2\x64\x1d\x6e\x2d\x6d\x2b\x5b\x0f\x70\xa3\x3e\x80\x61\x3a\x60\xec\x74\xfd\xb4\x80\x51\x37\xc4\xf0\x43\xb6\x94\x2b\xd9\x82\xe5\xf9\xbf\xff\x9d\xf4\x00\x04\xbb\x3e\x4e\xba\x90\xd2\x92\x06\x19\x3e\x13\x19\x22\xe2\xa3\x21\x6f\x69\xf3\xa2\x30\xc4\x34\xeb\x9a\xa4\x93\x0b\xa9\x5b\x88\xef\x52\x8f\x45\x9d\x5d\x4a\xc5\xed\xd7\x31\x7b\xa5\xac\x56\x8e\xb9\x31\x21\x74\x5f\x31\xe4\x34\xf8\x95\x63\x69\x5e\xf9\x69\x9e\x1c\xc5\xc4\x6e\x96\x44\xf4\x33\x0c\x3c\x61\x9b\xf0\xc7\x48\x52\x52\xe5\x1d\x24\xc8\x23\x6e\x9a\x8e\xc1\x38\xea\x85\xbe\x4c\x83\x4a\xae\x04\xbf\xa1\x5e\xca\xed\x54\xa2\x3c\xf1\xfa\x86\xc2\xa2\x98\x86\xed\x58\xb2\x66\x38\x55\xeb\x11\xe2\xdd\x44\x65\xaf\x60\x67\x68\x77\x3b\x15\x96\x7c\xaf\xe2\x12\x78\xb0\x4a\xd1\x9b\x4b\x72\x9c\x22\x6f\x8f\xbd\x57\x50\xae\x54\xe5\x06\x96\xbc\x03\xec\x86\x2f\x17\xe1\xe2\x14\x16\x4f\x8b\x93\x71\x8a\xa6\x19\x42\xa6\x56\xaf\x0a\x42\x99\x13\xae\xf9\xa2\xf0\x65\xc3\x17\x75\x8a\xbf\x6e\xa3\x90\xbe\x69\x72\xc1\xbe\xbe\xe4\x7c\x96\xcd\xd7\x2d\x5f\x8a\xbf\x94\x3d\x0b\x30\x76\x63\x11\x57\x60\x75\x6d\xab\x9d\xf2\xf6\xf2\x24\x0e\x87\x05\x96\xfa\xbf\x6a\xa9\x86\xa2\xda\x15\xa8\xd2\x06\xf3\x3d\x02\x2f\x04\x3e\x88\xcd\x44\x15\xe3\x2c\x28\x46\x43\x19\x7b\xfe\x00\x60\x0f\xf3\x24\x63\xc2\x39\x60\x7c\x3e\xb0\x1c\x6d\xab\xda\x8e\xbc\xbd\x85\x7b\xcd\xb9\x32\x77\x4e\xb1\x03\x3f\x4d\x43\x1d\x7a\xf0\xf1\xd0\x21\x1d\xe6\x4d\xa3\x30\xa0\xee\x77\xd3\x6e\x55\x7d\xac\x6b\x0d\xb2\xba\xef\xec\x29\x2e\xc0\xa4\x9a\xd8\x13\xba\x04\x33\x25\xe4\x6c\x62\xb5\xc9\xeb\x1c\x9e\xf0\x31\x44\xf6\x19\x37\x51\xce\xfe\x16\xb4\x96\xf5\xa0\x27\x6d\x06\x6b\xac\xee\xc7\x94\x95\xf9\x0e\x47\x43\xdf\x7f\x04\x71\x80\xb4\x74\xd2\x9c\x08\x42\x3c\xf3\xae\x3e\x8a\x5a\x0a\x69\x98\xfa\x06\x5d\x1b\xd7\x5c\x0f\x86\x7a\x7f\xf8\x53\xd1\x65\xdb\xd6\x94\x5a\x80\xe3\xdc\x75\xcd\xdd\x00\x4d\x2b\x66\xc8\x7b\x82\xfd\xd0\xb3\x1e\x7b\xdd\xca\x3f\x63\x6f\xf7\x7c\x98\xff\xfc\x21\x32\xa7\x8c\xb1\x40\x9d\x53\x9d\x35\xad\xba\xd2\x4b\x70\x9a\x93\xac\x91\xdd\x57\x84\xf7\x6d\xe9\xd5\xfe\x5f\x1e\x8d\xc5\xd3\xea\x4d\xe3\xd9\x72\x68\xec\xa7\xd0\x7e\xe1\xd3\x28\x03\x9a\x13\xd2\x30\x55\xd5\x1f\xd4\xf0\xcf\xb9\x48\xfb\xec\x75\x4a\x5c\xf6\xba\x14\xca\xba\x32\xa2\xa7\x24\x0a\xc7\x10\x41\xca\xcf\x08\xd6\xa6\xa9\x8b\xe9\xa3\x80\x66\xe9\x98\xf7\x40\xb0\x42\x0e\x97\x10\x54\x64\x92\x4e\xa6\xd2\x82\x65\x51\x0f\x24\x44\x09\x87\xd2\x11\x66\xe1\xa8\x12\x06\x6a\x5d\xf8\xf2\x28\x90\xe8\x92\xcf\xd2\xea\x24\xa9\xa8\xa0\x6e\x0c\x61\xc9\xf3\xc6\xc3\xd1\x88\xe2\x29\x24\x6c\xd8\x64\x44\xa9\xd4\x6f\xfb\xd3\x61\x13\xbd\xd3\xc3\xc7\x43\xfd\xe5\xc0\x37\x67\x7d\x3b\x24\x11\x21\xcc\xfa\xe8\x7a\xaf\xd2\xc6\x32\x6f\x3b\x33\xe1\xa2\xbd\xd5\xfa\xaf\xa6\xb3\xdf\x48\xad\xb3\x3d\xc0\x95\xfe\x5d\x4c\x33\x11\x3a\xfb\xcf\x51\x12\xa3\x3a\xcd\xf4\x42\xfa\x1d\x00\x00\xff\xff\xc0\x95\x0f\xef\x2b\x0d\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 3371, mode: os.FileMode(420), modTime: time.Unix(1471287745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5b\x6f\xdb\xca\x11\xc7\x9f\xc5\x4f\xc1\x63\xe0\x14\x12\xe0\xca\xbc\x5f\x02\xe4\xe5\x24\x29\x90\x87\x93\x03\x34\x79\xab\x8b\x60\xb9\xbb\x54\x89\xca\xa2\x23\xca\xa9\x9d\x20\xdf\xbd\xf3\xdb\x59\x39\x4e\x83\x34\x2f\xc7\x80\x4c\x72\x77\x2e\xff\x99\xf9\xcf\xec\x5e\x5d\xa5\x2f\x66\xe7\xd3\x9d\x3f\xf8\xa3\x39\x79\x97\x0e\x0f\xe9\x6e\xfe\xeb\x30\x1d\x9c\x39\x99\x6d\x22\x02\xcb\x7c\x77\xb4\x7e\x79\xc6\xbb\x1b\xae\x6e\xa6\x9d\x48\x4e\xf3\x61\xb9\xca\xb2\xfc\xfd\x74\x98\x4e\x93\xd9\x6f\x97\x0f\xfb\xef\x05\xce\x66\x76\x33\x7b\x2f\xff\x48\xdf\xfc\xf1\x2e\x7d\xf5\xf2\xf5\xbb\x5f\x92\xe4\xd6\xd8\x7f\x9b\x9d\x4f\xbf\x8a\x27\xc9\x74\x73\x3b\x1f\x4f\xe9\x3a\x59\x5d\x0c\x0f\x27\xbf\x5c\xc8\x8b\x9d\x6f\x6e\x8f\x7e\x59\xae\x76\x9f\xa6\x5b\x16\xc6\x9b\x13\x8f\x69\xd6\xff\x57\xd3\x7c\x77\x9a\xf6\x7c\xcc\x41\xe1\xd6\x9c\xfe\x75\x35\x4e\x7b\xcf\x0b\x0b\xcb\xe9\x38\x1d\x76\x61\xef\x34\xdd\xf8\x8b\x64\x93\x24\xe3\xdd\xc1\xa6\x11\xde\xdf\xbd\x71\x6b\x5e\xd2\x7f\xfc\x13\xb7\x97\xe9\xc1\xdc\xf8\x54\xd5\x36\xe9\xfa\xbc\xea\x8f\xc7\xf9\xb8\x49\x3f\x27\xab\xdd\xa7\xf0\x95\x3e\x7b\x9e\x82\x6a\xfb\xc6\xff\x07\x23\xfe\xb8\x0e\xb0\xf9\xfe\xed\x6e\x1c\xe5\x1b\xb3\x9b\x4d\xb2\x9a\xc6\xa0\xf0\xcb\xf3\xf4\x30\xed\x31\xb1\x3a\xfa\xd3\xdd\xf1\xc0\xe7\x65\x2a\x21\x6d\x5f\x61\x7d\x5c\x5f\x60\x28\xfd\xf5\xc3\xb3\xf4\xd7\x8f\x17\x8a\x24\xf8\x12\x1b\x5f\x92\x64\xf5\xd1\x1c\xd3\xe1\x6e\x4c\xd5\x8f\x3a\x49\x56\xef\x15\xce\xf3\x74\x9a\xb7\x2f\xe6\xdb\x87\xf5\x5f\x44\xe6\x52\xb0\x89\x96\xdd\xbf\x3a\x23\xdd\xbe\xd8\xcf\x8b\x5f\x4b\xf8\x7f\x12\x1e\xcc\xa8\xfd\x1f\x18\x12\x41\xc5\x1d\x17\x05\xd6\xf6\x37\xa0\xaf\x37\x97\x48\x24\xb2\x77\x7a\xb8\xf5\xa9\x59\x16\x7f\x22\xe5\x77\xf6\x84\x95\x10\x5f\xac\x87\xb8\x39\x8c\x73\x9a\xce\xcb\xf6\x6f\x52\xd6\xd7\xf2\xf1\xa8\x17\x4b\x78\x5e\x7f\x62\x21\xd4\x50\xfe\xb4\x8c\xc9\x6a\x99\x3e\x85\xef\xe9\x70\x6a\xaa\x64\x75\x03\xed\xd3\x47\xa3\xbf\xcb\x67\x58\x7c\x27\x0c\x49\xa1\xc9\x96\x37\xfc\x04\xaa\xac\xc7\xe9\x7f\x7d\x6d\xd2\x37\xe2\x62\xbd\x89\x1e\xf0\x19\xa3\x1c\xa7\x2d\xde\x45\xf9\xc7\xba\x6f\x05\x8e\xe8\x06\x34\xdf\xaa\x02\xf4\xff\xaa\x82\x55\x54\x9f\x20\xff\xd6\x00\xa1\xfd\xcc\x00\xc1\x89\x8d\xc7\x40\xbf\xb3\x10\xa3\xff\xb1\x91\xd7\xcb\xcb\xe9\x28\x26\x86\x79\xde\x3f\xd5\x36\xfb\xe5\x27\x91\x3f\x2c\x1a\xb8\x3f\x8e\xc6\xfa\xcf\x5f\x9e\x68\x47\x4a\xc0\xf2\xf7\x6e\xf8\xfd\x71\x34\x3c\x99\x34\x6f\x3f\xec\x85\xe8\xca\x8c\xf5\xc5\xf5\x7d\x3e\x5e\xdf\x77\xc3\xf5\x7d\xd6\xc9\x2f\x8b\xbf\xfe\xfa\xbe\xf1\xb2\x1e\xd7\x46\x91\x31\xd5\xf5\x7d\xdd\x5e\xdf\x57\x22\x5b\x97\xf2\x2d\xcf\x4a\xf6\x73\x59\x77\x22\x3b\xca\x5a\x21\x6b\x56\xde\x0b\xf9\x0d\xb9\xbc\x37\x22\x2b\xfb\x9d\x13\x59\x59\xb3\xf2\x6c\xac\xac\xc9\x2f\x67\xbf\x10\x59\xb1\x51\x19\xf9\x89\x9f\x2e\xd7\x3d\x2b\x76\x06\xf9\x79\xc1\x51\x89\x4c\x03\x0e\xd1\x75\x22\x57\x56\x51\x5f\xec\x95\xf8\xe5\x27\x7b\x5e\x7e\x59\xa3\x36\x07\xb0\x88\x2d\x2f\x7a\x4d\x2d\x7a\xb9\x3e\x47\xd1\x6f\x45\xd7\x4b\x1c\xa5\xd8\xef\x24\x2e\x2f\xfa\x5e\x9e\x45\xa6\x31\xe5\xc8\x59\x7d\x06\x7b\xe4\x47\x70\xf4\xb2\xd7\x88\x1d\x27\x36\xad\xec\xe5\xe2\x67\x64\x4d\xf6\xdc\xa8\x58\x73\xb1\x51\x67\x9a\x17\xe2\xef\xc5\x4f\x56\x6b\xac\x5d\xad\x7a\xe4\xa6\xf6\x1a\x6f\x4f\xae\x0b\x8d\xc1\x66\xba\xde\x7b\xf5\x43\x5d\x42\x5e\xc5\x46\xdf\x69\x1e\x06\xc1\xd3\xc8\x77\x2d\x7e\x4d\xad\x32\x59\xab\xbe\x78\xa7\x66\xb9\x60\xef\xcb\x58\x37\x91\xeb\xc9\x9f\xfc\x8c\xe0\x1b\x78\xca\x5e\x47\xde\xa9\xa1\xe8\xb4\xb5\xc6\x5a\x5a\x95\x2d\xc7\x58\x8f\x41\x79\x40\xbc\xb9\xc8\x8e\xc4\x24\x36\x5d\xa3\x31\x34\xd4\x83\xdc\x62\x5f\x6a\x92\x3b\xf5\x5f\x38\xdd\x83\x0b\xe0\xcc\xf0\x91\xa9\x5f\xea\xd5\x65\x1a\x5f\x29\x3e\x1a\x79\xf7\xe2\xb7\xad\xb4\x86\x43\xa5\xfb\x35\xfb\x12\x97\x65\x9d\x7c\x96\x1a\x7b\x5f\xa9\x5d\xd7\x6b\x0c\x9e\x5a\x11\xd7\xa8\x1c\xed\xc5\xc6\x58\x45\x0e\x57\xca\x21\x7c\xc2\xbd\xc1\x68\xbe\xc1\x4b\x9c\xd4\x36\xef\x75\x9f\xf8\x78\x2f\xb0\x19\x73\x04\x7f\x9a\x51\xeb\x0b\xb7\x0d\xb9\xc9\x14\x13\x1c\xf4\xe4\xd6\x68\x5f\x84\x7c\x0f\x9a\x63\x62\xa6\x6f\xe0\x54\x5d\x28\xc7\xaa\x5a\xb1\xd5\x4e\x73\x0b\x0f\xe0\xab\x83\x87\xe2\xa7\x8d\xf5\x34\xf4\x86\xe0\xea\xc0\xdb\xeb\x1e\x38\xc8\x4f\x3d\xea\xb7\x8f\xfe\xa9\x47\x2f\x3a\x4d\xa9\x18\xe1\x0e\xb9\xe0\xbd\x8f\x3c\xc0\x0f\x78\xa9\x4b\x2f\x76\xab\x4a\xf3\x53\x82\xd7\x6a\xcd\xa9\x05\xdc\x26\xcf\xb6\x55\xee\x82\xbb\x8e\xf9\xa5\xae\x85\xe8\xd8\x4e\x39\x13\x6c\x19\xc5\x68\xa9\x13\xb1\x1a\xe5\xf7\x40\xae\xc5\x66\x57\x6a\x9c\xc6\xc7\x3a\x30\x3f\x72\xc5\x68\x8d\xc6\xce\x5c\x08\x39\x15\xf9\x31\xd7\xde\xec\x62\xff\xb2\x0e\xe7\xf9\x0e\xb2\x9d\x72\xb7\x69\xd4\x5f\x5d\x6b\xfe\xe9\x2b\xea\xe5\x9c\xc6\x46\x8f\xc3\x69\x78\x45\x9f\x30\x37\xda\xd8\xeb\x70\x9c\x1c\xd0\xff\xc8\xa0\x47\x0f\xb7\x91\xd7\xe0\x75\x31\x17\x70\xbf\x05\x83\x55\x4e\xc0\x03\xea\x38\x38\x9d\x81\xf4\x38\xb1\x11\x83\x8f\x73\x02\xdb\x83\xc8\x67\xa5\x72\x1a\xec\x85\xe8\xe4\x22\xef\x23\x4e\x66\x65\x4e\x1d\xe2\xcc\x85\x37\x2d\xb3\x81\x5c\x45\x3e\xd2\xe7\xbc\xc3\x03\x70\x66\x46\xd7\xfa\x5e\x79\x6a\x62\x9d\xc9\x11\x35\x23\x66\x5b\xaa\x1f\x7a\x19\x5b\x43\x9c\x05\xf0\x18\xce\x53\x17\x78\x41\x4c\xd4\x8c\x6f\x7e\x70\x89\x7c\x80\xdd\x46\x3e\xd2\xbf\x70\xed\x6c\x87\x9e\x2b\x9d\xf2\x1b\xfe\xb7\x8d\x72\x8e\xdc\x93\x0b\x72\x8d\x5f\x7a\x9e\xf9\x19\x7a\x10\x6c\x8d\x3e\xe1\x4e\x46\xdf\xc7\x59\x88\xaf\xf1\x8c\xd1\x68\xcf\x90\x2b\xe2\x61\xbe\x53\x27\xd3\x69\x9f\x92\x57\x7a\x2f\xf8\x2f\x34\x9f\xf0\xa9\x8c\x67\x93\x8d\x75\x47\xc7\xd3\xb3\x36\x9e\x27\x8d\xce\x0c\xf2\x49\x6f\x31\x5f\x99\x09\x60\x65\x1e\x85\xb3\xaa\xd2\x38\xe0\x5b\xd9\xc7\x38\xac\xda\x86\x0f\xf4\xcf\x39\x26\x17\xf9\x4e\x7d\xe1\x00\x5c\xc7\x2e\xfe\x43\x9f\x16\xca\xb3\x2a\x9e\x7b\x70\x20\xcc\x51\x17\x71\xc8\xb3\x35\x5a\x2f\xb8\xee\x32\xed\x6b\xd6\x7d\xa3\x72\x61\x3e\xc2\xab\x4c\xcf\x24\xec\xb9\xd8\x6f\xf0\xbd\x75\x3a\x1f\x9a\x41\xcf\x42\xfa\x81\x99\xc6\x9c\x81\x6f\x45\xaf\x73\x99\x73\x24\xcc\x24\xf3\x75\x76\x23\x97\xc5\xbe\x2f\x6a\xad\x3b\xe7\x30\xe7\xc2\x00\x7f\xfa\xd8\x4f\x56\x67\x07\x38\x99\x35\x61\x5e\x9c\xe7\x64\xab\x73\xd9\xc6\x33\x17\x1e\x33\xaf\x43\x3d\x6b\xc5\x5d\xb4\x9a\x33\xea\x06\x4e\xf0\x12\x0b\x73\x05\x1e\xf5\x71\x5e\xc3\x87\xaa\xd5\xdc\x70\x76\xb6\xb1\xae\xa1\x17\x32\xb5\xcb\xcc\x73\xb1\x07\xb3\x78\xfe\x85\x59\x11\x7b\x20\x70\x40\xe2\xaa\x8d\xf6\x48\x98\x7b\x9d\x72\x0b\xff\xcc\xda\x7c\x50\x4e\x73\x5f\xa0\xee\xf0\x8c\x3a\xe0\x8f\xf9\xc9\x3d\xe6\x7c\x37\x70\x83\x9e\x6d\xe0\xc4\x26\x38\xe0\x94\xb3\xca\xef\xd0\x1f\x4e\x79\x54\xc5\xf3\x8d\x79\xc4\x5c\x84\x0b\x9c\x47\x9c\x61\xd4\x96\xfb\x07\xf7\x13\xd6\xd1\x61\xe6\xc1\x87\x30\xab\x47\x3d\xd3\x43\xdf\x75\x7a\x6e\x71\xdf\x80\x0f\xf0\xc8\xc8\x5e\x67\x95\x47\xe1\x8e\xe0\x14\x27\xcf\x92\x3c\x3b\xad\x27\xb9\x09\x73\x2a\xd3\x5a\x33\x4b\xc8\x77\x9f\xab\x4f\x7a\xb3\xab\xd4\x17\x35\xe1\x7e\xc2\x79\x4d\xed\xe8\x6f\xf0\x71\x2f\xe3\x8c\x80\x67\xcc\x70\xe2\x0a\x31\xc7\x59\xc1\xfc\x84\x5b\x60\x22\xae\xd6\xeb\x2c\x43\x9e\x3e\x83\xe7\xf8\x86\x63\x2e\x9e\x8f\x70\xd5\xc5\xbb\x89\x8b\xe7\x37\x77\x28\xfa\x84\xb3\x85\x3b\x89\x8f\x39\x65\xe6\x52\x1b\x38\x46\x4c\xcc\x47\x72\xc5\x7b\x19\xcf\x01\x7c\x87\x19\x62\x94\x47\xdc\xb1\xaa\x5c\xe5\xb0\x0b\x37\xa8\x1b\x33\x33\xcc\x92\x78\x6f\x0c\xf7\x9c\x4c\x6b\xe4\xcf\xdc\x68\x35\xa7\x61\xde\x17\xca\xc3\x3e\xda\x64\x96\x73\x8f\xe1\x6e\x40\x1f\x63\x8f\x98\xa8\x2b\xfc\x80\xfb\x70\x08\x2c\xf4\x05\x77\xa3\xee\xbf\x01\x00\x00\xff\xff\x91\x29\x1c\x72\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1471287804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

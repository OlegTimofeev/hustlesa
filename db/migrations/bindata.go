// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x4d\x73\x9b\x30\x10\xbd\xf3\x2b\xf6\x66\x67\x1a\xcf\x34\x9d\x69\x2f\x39\x61\xac\x26\x24\x18\x12\xc0\xcd\xa4\x17\x8d\x02\x4a\xac\x04\x04\xe5\x23\x71\xfe\x7d\x25\xc0\x7c\x1a\x9b\x69\x39\x68\xec\xdd\xb7\x6f\x77\x1f\xda\x1d\x16\x0b\xf8\x12\xb2\x97\x84\x64\x14\x36\xb1\x22\xfe\x3a\xf7\x06\x30\x0e\x29\xf5\x32\x16\x71\x98\x6d\xe2\x19\xb0\x14\xe8\x8e\x7a\x79\x46\x7d\xf8\xd8\x52\x0e\xd9\x56\x98\xca\x38\x09\x12\x7f\x48\x1c\x07\x8c\xfa\x8a\x66\x23\xd5\x45\xe0\xaa\x4b\x03\x81\x17\xe4\x4f\xca\x5c\x01\xf1\x30\x1f\x96\xfa\x95\x83\x6c\x5d\x35\xe0\xce\xd6\xd7\xaa\xfd\x08\xb7\xe8\x11\x4c\xcb\x05\x73\x63\x18\xe7\x05\x8c\x93\x90\xc2\x2f\xd5\xd6\xae\x55\x1b\xe6\xdf\xbe\xff\x38\xeb\x01\x02\x4a\x7c\x9a\x74\x21\xa5\x27\x65\x19\xbd\x38\xe4\x88\x02\x1f\x0f\x79\x4b\x9f\x17\x85\x21\xe5\x59\xd7\xa5\x9c\x5d\x2a\xdd\x46\x7c\xc2\x3d\x91\x75\x72\x2b\x15\xb7\x5f\xe7\xec\xb5\xb2\x58\xb8\xd6\xca\x82\x90\xbc\x51\xc8\x39\xfb\x93\x53\x65\x5a\xfb\x69\x9e\x9c\xc4\xc4\x24\x4b\x22\xfe\x19\x32\xef\xa0\x4c\x74\x37\x52\x94\x52\x45\xb3\x04\x7b\x01\x49\xd3\x31\x98\x44\xbd\xf2\xd7\xe3\xa0\x92\x2b\xa1\xef\xb8\x57\x72\xbb\x94\x28\x4f\xbc\xbe\xa3\xf0\x68\x96\xe9\xb8\xb6\xaa\x9b\x6e\x25\x3d\xc6\x52\x4d\x5c\x6a\x05\x1b\x53\xbf\xdf\x20\x98\x4b\x5b\xc5\x75\x20\x42\x74\x8a\xdf\x49\x90\xd3\x14\x7b\x5b\xea\xbd\x81\x76\x8d\xb4\x5b\x98\x4b\x05\xc4\x0d\x9f\xcf\xc2\xd9\x39\xcc\x9e\x67\x67\xe3\x14\x8d\x18\x07\x99\x5a\x5a\x15\x84\xaa\x24\x5c\xca\x43\x93\xc7\x4a\x1e\xe8\x18\x7f\x2d\xe3\x41\xfa\x46\xe4\x82\x7d\x79\x25\xf9\x6c\x47\x9e\x6b\x79\x14\xbf\xb4\xad\x48\x30\x76\x63\xb1\x9c\xc0\xea\xda\x56\x96\xf2\xf6\xca\x22\xf6\x2f\x0b\x6c\xf4\x13\xd9\xc8\xd4\x90\x53\x81\xaa\xd9\x10\xb1\x27\xe0\xc5\x80\x0f\x72\x8b\xa1\x8a\x69\xc6\x8a\xd5\x50\xe6\x9e\xbe\x00\xc4\x23\x22\x83\xb1\xc1\xd9\x63\x7c\xb9\xb0\x5c\x7d\x8d\x1c\x57\x5d\xdf\xc1\x83\xee\x5e\x5b\x1b\xb7\xb0\xc0\x6f\xcb\x44\xc3\x08\xb9\x1e\x3a\xa4\xc3\xba\x79\x14\x32\x4e\xfe\xb5\xec\x56\xd7\xa7\x54\x6b\x90\xd5\x7d\x17\x4f\x71\x01\x8e\x4e\x93\x78\x42\x12\x50\x31\x09\xb9\xd8\x58\x6d\xf2\xba\x86\x67\x7a\x0a\x91\x7d\xc6\x4d\x96\x8b\xaf\x07\xa4\x15\x1a\xf4\x46\x5b\xc0\x1a\x2f\xd9\x1d\xf3\x8a\xd8\xe1\x6a\xe8\xc7\x8f\x20\xf6\x90\xd6\x9c\x34\x6f\x04\x63\x59\x79\x77\x3e\x8a\x5e\x8a\xd1\xb0\x8c\x15\xbe\x31\x6f\xe4\x3c\x98\xe8\x61\xff\x53\x33\x54\xc7\xd1\xb5\x7a\x00\xc7\xb9\xeb\x9e\xbb\x09\x1a\x29\x26\x8c\xf7\x11\xf6\xbd\x66\x3d\xf6\x5a\xca\xff\x63\x6f\x6b\x3e\xac\x7f\xfa\x12\x99\xd2\xc6\x58\xa2\xce\x5b\x9d\xb4\xad\x94\xf6\xa7\xc7\x2a\xfa\xe0\xfb\x8f\x8f\xfa\xcb\x43\x1a\x27\x7d\x7b\x24\x51\x10\x08\xef\x13\xf1\xde\x94\x95\x6d\xdd\x0d\x57\xe0\x65\xdb\xde\xf4\xd4\x31\x0f\x70\x65\x7c\x17\xd3\x4c\x6e\xc7\xfe\x12\x25\x31\xae\x6b\x4a\x2f\x95\xbf\x01\x00\x00\xff\xff\x5e\x7f\xfc\x94\x58\x09\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 2392, mode: os.FileMode(420), modTime: time.Unix(1471279940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x97\x5b\x6f\xdb\xd8\x11\xc7\x9f\xc5\x4f\xc1\x15\xb0\x85\x04\xb8\x32\xef\x97\x00\x79\xd9\x24\x05\xf2\xb0\x59\xa0\x9b\xb7\xaa\x08\x0e\xc9\x73\x54\xa2\xb2\xe8\x88\xf2\x56\x4e\x90\xef\xde\xf9\x9d\x39\xb2\x9d\xa6\x4e\x5e\x36\x00\x63\x72\x78\xe6\x3f\xb7\xff\xcc\x50\xd7\xd7\xf1\xab\x69\xb0\xf1\xce\x1e\xec\xd1\x9c\xec\x10\x77\xf7\xf1\x6e\xfa\x6b\x37\x1e\x06\x73\x32\x9b\x48\x0e\xcc\xd3\xdd\xb1\xb7\xf3\x0b\xee\x87\xee\xfa\x66\xdc\xc9\xc9\x71\x3a\xcc\xd7\x49\x92\x7e\x18\x0f\xe3\x69\x34\xfb\xcd\xfc\x71\xff\xed\x81\x0b\xcc\x6e\xe2\xdd\xeb\xdf\xe2\x77\xbf\xbd\x8f\xdf\xbc\x7e\xfb\xfe\xa7\x28\xba\x35\xfd\xbf\xcd\xce\xc6\x8f\xc7\xa3\x68\xbc\xb9\x9d\x8e\xa7\x78\x15\x2d\x96\xdd\xfd\xc9\xce\x4b\xb9\xe9\xa7\x9b\xdb\xa3\x9d\xe7\xeb\xdd\xa7\xf1\x16\x81\xbb\x39\xf1\x67\x9c\xf4\xff\xeb\x71\xba\x3b\x8d\x7b\x1e\x26\xaf\x70\x6b\x4e\xff\xba\x76\xe3\xde\x72\x83\x60\x3e\x1d\xc7\xc3\xce\xbf\x3b\x8d\x37\x76\x19\xad\xa3\xc8\xdd\x1d\xfa\x38\xb8\xf7\x77\x6b\x86\x15\x37\xf1\x3f\xfe\x89\xd9\xab\xf8\x60\x6e\x6c\xac\x6a\xeb\x78\x75\x91\xda\xe3\x71\x3a\xae\xe3\xcf\xd1\x62\xf7\xc9\x3f\xc5\x2f\x5e\xc6\x78\xb5\x79\x67\xff\x03\x88\x3d\xae\xbc\xdb\x3c\xff\x72\xe7\x9c\x3c\x03\xbb\x5e\x47\x8b\xd1\x79\x85\x9f\x5e\xc6\x87\x71\x0f\xc4\xe2\x68\x4f\x77\xc7\x03\x8f\x57\xb1\x84\xb4\x79\x03\xba\x5b\x2d\x01\x8a\x7f\xfe\xf8\x22\xfe\xf9\x8f\xa5\x7a\xe2\x6d\x09\xc6\x97\x28\x5a\xfc\x61\x8e\x71\x77\xe7\x62\xb5\xa3\x46\xa2\xc5\x07\x75\xe7\x65\x3c\x4e\x9b\x57\xd3\xed\xfd\xea\x2f\x72\xe6\x4a\x7c\x13\xad\x7e\xff\xe6\xe2\xe9\xe6\xd5\x7e\x9a\xed\x4a\xc2\xff\x93\xfc\x01\x46\xf1\x9f\x01\x92\x83\xea\x77\x10\x8a\x5b\x9b\x5f\x70\x7d\xb5\xbe\xe2\x44\x24\xef\x4e\xf7\xb7\x36\x36\xf3\x6c\x4f\xa4\xfc\xae\x3f\x81\xe2\xe3\x0b\xf5\x10\x33\x07\x37\xc5\xf1\x34\x6f\xfe\x26\x65\x7d\x2b\x0f\x0f\x7a\xa1\x84\x17\xf9\x13\x04\x5f\x43\xf9\xa7\x65\x8c\x16\xf3\xf8\xc9\x3f\x8f\x87\x53\x55\x44\x8b\x1b\x68\x1f\x3f\x80\xfe\x2a\x8f\x5e\xf8\x5e\x18\x12\x43\x93\x0d\x77\xd8\xf1\x54\x59\xb9\xf1\x7f\x6d\xad\xe3\x77\x62\x62\xb5\x0e\x16\xb0\x19\xa2\x74\xe3\x06\xeb\xa2\xfc\xbc\xee\xef\xe2\x8e\xe8\x7a\x6f\xbe\x56\xc5\xd1\xef\xaa\xe2\xab\xa8\x3e\xf1\xfc\x6b\x00\x42\xfb\x11\x00\xc1\x09\xc6\x43\xa0\xdf\x20\x84\xe8\x9f\x07\x79\x3b\xbf\x1e\x8f\x02\xd1\x4d\xd3\xfe\xa9\xb6\xd9\xcf\x3f\x88\xfc\x7e\xd6\xc0\xed\xd1\x99\xde\x7e\xfe\xf2\x44\x3b\x50\x02\x96\x7f\x18\xba\x5f\x1f\x46\xc3\x93\x49\xf3\xfb\xc7\xbd\x10\x5d\x99\xb1\x5a\x6e\xcf\xa9\xdb\x9e\x9b\x6e\x7b\x4e\x1a\xb9\x92\x70\xb5\xdb\x73\x65\x45\x1e\x64\x4e\xce\x98\x62\x7b\x2e\xab\xed\xb9\x18\xb6\xe7\x3a\xdf\x9e\x5b\xd1\xc9\xe5\x5d\x2a\x57\x27\x32\x27\xb2\x4c\x64\x4e\xce\x54\x5c\xb5\xbc\x33\xdb\x73\x2f\xba\xb9\xe8\xb6\x72\xa6\x12\xdc\x8c\x67\xf0\x53\xc1\xec\xe5\x59\xce\x66\xf2\x3e\x15\x5b\x69\x26\xe7\x05\xaf\x1f\xd4\x5e\x2a\x18\x8d\xdc\x27\x22\x2f\x8c\x9e\x4f\x0a\xbd\x6c\x29\x7a\x62\xb3\x16\x1c\x27\xbe\xd6\x72\x2e\x2b\x55\xbf\xee\xd5\x36\x3e\x62\xd3\xdb\x13\x7c\x2b\xf2\x41\xce\x75\x82\x5b\x89\x1f\x75\xad\xf1\x0f\x72\x36\x15\x79\x2a\xbe\x24\xc4\x10\x7c\xe9\xe4\x6a\xf1\x41\xec\x55\xf8\x23\x57\x2e\x67\x3a\xb1\x99\x65\x6a\x37\x17\x5d\x27\x67\x92\x4a\xf3\x91\x88\x2c\x13\x7b\x4e\x7c\xc9\x33\xc5\xc4\xc7\x56\x30\x2b\xb1\x61\x91\xc9\xfb\x2e\x51\x3c\x2b\xf2\x06\xff\x05\xa7\x16\x79\x51\x69\x2c\xf8\x30\xc8\x55\x66\x8a\x39\xb4\x9a\x7f\x70\x7a\x39\x9b\x37\x5a\x27\xfc\xac\x25\x86\x02\x9f\xc9\x0f\xfe\xca\x5f\x27\x67\x1a\xa3\xb5\x20\x4f\x83\xf8\x53\xc8\x65\xc5\xae\x11\x79\x41\xcd\x45\xde\xa4\x9a\x67\x2b\xbe\x14\x4e\xb1\x4b\x70\xc8\x6b\x1a\x6a\x2c\xf2\xb6\x52\xcc\x56\x30\x1a\xd1\xab\xe4\x4c\x29\x7e\xe6\x01\xb3\xc7\x47\x39\x33\xd4\x8a\xef\x06\xe5\x14\xb9\x26\xc6\x54\xb0\x0a\xd1\xe9\xb1\x5b\x2a\x87\xaa\x5c\xeb\x6e\x6b\x95\xe1\x77\x0b\xb7\xc0\xcb\x94\x2b\xf8\x0d\xae\x11\xfc\x52\xee\x53\xd1\xb7\xd8\x91\x77\x9d\x55\x6e\x92\x0b\xdb\xa9\xcf\x17\xae\xc0\x81\x96\xbf\x12\x57\x06\xd7\xe0\x0b\x75\x2f\x43\xfe\x87\xa0\x57\x04\x9e\x67\x1a\x67\xe2\x42\x1d\x04\xaf\x75\x81\x83\xa5\x62\xc0\xb9\xb2\x0d\x31\xca\x7d\x1b\x72\x90\x19\xe5\x95\xaf\x5d\xaf\xbe\xe7\xf2\xdc\x8a\x4e\x4d\xac\x99\xf6\x46\x5a\x6a\x3e\x4a\xa7\x31\xc3\xc7\xae\x54\x9e\x95\xe4\xaa\xd1\x58\xa9\x41\x93\x69\x1e\x3a\x6c\x08\x4e\xdf\x28\x8f\x5d\xa7\x39\x2a\x73\x8d\xa5\x34\x2a\x83\xe7\xad\x55\x9f\xfa\x42\x2f\xfa\x8a\x38\x2e\x5c\x25\x6e\x38\x69\xe9\xe7\x44\xeb\x41\x7e\xf2\x5a\x79\xd6\x16\xfa\x17\x9e\x74\xb9\xf6\x59\x1d\xf2\x5a\x10\xb7\xc8\xf2\xc0\xe5\xa2\x08\x7d\x9f\x69\x3e\x6c\xae\x98\x6d\x88\xd5\xa4\x6a\x87\x98\xca\x5a\x73\xd0\x75\x6a\x23\x6b\x94\x6b\xc4\x46\x0d\x8d\xe8\xba\x44\x7b\x14\x9e\xd9\x56\xf5\xba\x4a\xb9\xe4\xfb\xd8\x6a\x7f\x93\xd7\xbe\x0a\x7e\x0e\xca\xd5\xca\x28\x7f\xe0\x06\x79\xe9\x9c\xf2\x23\x4b\x82\xaf\xc8\xe5\xea\x4b\xad\x07\xf2\x22\xd3\xd8\xe9\x11\xce\x12\x1f\xf9\x26\xc6\x34\xc4\x8d\x8e\x35\x1a\x27\x7d\x52\x57\x3a\x8f\xba\x42\xdf\x5d\xb0\xb1\x4d\xbe\x93\x41\x39\xc3\xcc\x83\x03\x43\x98\x3d\x7d\xaf\xb5\x61\x26\x56\x21\x57\xd8\x00\x0b\xfe\xd3\xb3\x6d\xab\xb5\xe4\x82\x27\xcc\x1c\x62\xa7\x86\xc4\x08\x27\x8a\x5c\x6b\xdf\xd7\xca\xf1\xd4\x86\xde\x6a\x74\x06\x64\x83\x62\x17\xa9\xf6\x2a\x7c\xf4\xfc\xce\x74\xa6\xc0\x6b\x72\xe8\x5a\xed\xdf\xa2\x0e\x7e\x75\xfa\x0e\x9f\xc8\x1d\xf1\x99\x41\x67\x0a\xfd\x4f\xdc\xf4\x2a\x73\xcf\xf3\x2b\xd1\xbc\x30\x37\xfd\x4c\xaa\x94\x07\x2e\x70\x37\x0b\xf7\xf4\x2f\xf3\x14\x5b\x8e\xf9\x99\x6b\x4e\xe0\xf2\x50\x68\xbe\xcb\x30\x83\x88\x95\x77\x7e\x9f\xa4\xda\xab\x7e\xae\x90\x8b\x24\xf4\x65\xa6\xbb\x0a\x6e\xf9\xd9\xd6\x2a\x17\x7c\x0d\xe9\x85\x44\x67\x03\x31\xc1\x2b\x76\x97\xef\x83\x5c\x7d\x6a\x42\x0c\x7d\xaa\xb6\x88\x89\x7e\xed\xc2\x3c\x26\xcf\xe4\xc9\xd7\xa5\x57\xde\xd2\xdf\xf0\x03\x1d\xf4\x2d\x73\xc8\x6a\xfd\xe1\x1b\xfd\x8c\x2e\x39\x61\xa7\x30\xdf\xe8\x8d\x3e\x0f\xf3\xaf\xd5\x3a\xb1\x27\x4c\x90\x77\xe6\x31\xdf\xf4\x63\x61\xb5\x3f\x99\x05\xcc\x84\xf2\x32\x47\xb1\x5f\x68\x7d\x3c\x37\x4b\xf5\x8f\x99\x44\xff\xb0\x57\xe8\x4d\xf6\x07\x18\x70\xa3\x6e\x94\xdb\xec\x05\xf2\x41\xbf\xb2\x27\xf0\xc3\xef\x93\xb0\x87\xa8\x17\x7e\x34\x61\x57\xb3\x7f\x12\x13\x66\x56\xe8\x31\xfa\x8b\xda\xfa\x9c\x3b\xe5\xa9\xdf\xcb\xa5\xee\x57\x6a\x0a\xc7\x7c\x6f\x25\x2a\xf3\x33\xbb\xd5\x7d\xca\x37\x81\xaf\x0d\x73\x36\xd5\x3e\x85\xaf\xf0\xb7\x09\xfd\x09\x4f\x7c\x6c\x95\x72\x8b\x6f\x05\xf2\xc8\xec\xa1\x3e\xcc\x5b\x72\xc5\xae\xce\xad\xe2\x95\xe1\xef\x90\x6a\xee\xd9\x1b\x7e\xb6\x5a\x8d\x17\x7d\x78\x9f\xf7\xda\xa3\xd8\xe4\x7b\x83\x5d\x01\xdf\xf2\x5c\xf3\x8a\x1f\x1e\xa3\x0c\xf1\x27\x2a\x23\x57\xec\x13\xcf\xa3\x2e\xec\x59\xa3\x7b\x9d\xef\x15\xbf\x5f\x6b\xdd\x69\xf8\xcf\x7c\x60\xcf\x32\x9b\x78\xa6\x87\xe9\x03\xec\x11\x03\xfe\x50\x43\xfc\xe7\x1b\x86\x5e\xa5\x3f\xa9\x11\x7d\x3f\x64\x61\xa6\x89\x9f\x26\xd3\x5d\xea\xe7\xcb\xf0\xd8\x8b\xcc\x4d\xb0\xe1\x04\x3e\xb2\x73\xc0\xa0\x47\x98\xff\xe4\xb3\x09\xb8\x9e\x83\x79\xf0\xb9\x0e\xbd\xdf\x85\x59\x92\x6a\x8f\xc1\x4d\xe6\x33\x3d\xc9\x9e\x1f\xac\xda\x60\xbf\xc3\x0f\xf6\x19\xf3\xac\x0c\x7d\xc8\xae\x19\x3a\x3d\x47\xdd\xe9\x5f\xcf\x2d\x78\x18\xde\xfb\xef\xae\x5a\x67\x28\xbb\x85\x99\x8d\xaf\x7e\xf7\x64\x61\x7e\xa7\xba\xcb\xc9\x47\x11\xf8\x82\x4d\xe6\x8e\xdf\xdf\xc9\xe3\x37\xa7\xaf\x97\x0d\xf9\xea\xc3\x7e\x0a\xdf\x3d\x7a\x6e\x79\xf9\x2d\xfa\xfc\xd7\x6e\xf8\xbd\xf4\xff\x7e\x87\x5e\x7e\x55\x3d\xf9\x1d\x2b\x3f\xc0\xbe\xf3\xe5\x7c\x25\xaf\x97\x4f\x7e\xa3\xff\x37\x00\x00\xff\xff\xee\xee\x35\xbf\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1471280243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"001_initial.sql": &bintree{dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      &bintree{dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
